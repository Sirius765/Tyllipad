Перем ЭкспортТП Экспорт;

Перем ИндикаторОбщий Экспорт;
Перем ИндикаторЭлементов Экспорт;
Перем ТекстовыйКонтрол Экспорт;

Перем ТабЧастьПроцЛист;
//Перем ВерсияКонфигурации Экспорт;
Перем ВерсияОбработкиЭкспортТП Экспорт;
Перем АвтоСинхронизация Экспорт;

Перем ПростыеТипы;
Перем ТипСправочники Экспорт;
Перем ТипДокументы Экспорт;
Перем ТипПеречисления;
перем МодульФункций;

//++МС 31.10.2017
Перем мТекЕдИзм;
//--МС 31.10.2017

//++МС 17.12.2017
Перем мСписанияТоваров;
//--МС 17.12.2017

//Контролы прогресса -->
Процедура УстановитьКонтролыПрогресса(_ИндикаторОбщий, _ИндикаторЭлементов, _контрол) Экспорт;
	ТекстовыйКонтрол = _контрол;
	ИндикаторЭлементов =  _ИндикаторЭлементов;
	ИндикаторОбщий = _ИндикаторОбщий;
КонецПроцедуры

Процедура УстановитьМаксЗначение_ИндикаторОбщий(Значение)
	Если ИндикаторОбщий <> Неопределено Тогда
		ИндикаторОбщий.МаксимальноеЗначение = Значение;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьМаксЗначение_ИндикаторЭлементов(Значение)
	Если ИндикаторЭлементов <> Неопределено Тогда
		ИндикаторЭлементов.МаксимальноеЗначение = Значение;
	КонецЕсли;
КонецПроцедуры
Процедура СледШаг(Значение = неопределено) Экспорт;
	Если ИндикаторЭлементов <> Неопределено Тогда
		Если Значение = Неопределено Тогда
			ИндикаторЭлементов.Значение = ИндикаторЭлементов.Значение + 1;
		Иначе
			ИндикаторЭлементов.Значение = Значение;
		КонецЕсли
	КонецЕсли;
КонецПроцедуры
Процедура СледШаг_Общий(Значение = неопределено) Экспорт;
	Если ИндикаторОбщий <> Неопределено Тогда
		Если Значение = Неопределено Тогда
			ИндикаторОбщий.Значение = ИндикаторОбщий.Значение + 1;
		Иначе
			ИндикаторОбщий.Значение = Значение;
		КонецЕсли
	КонецЕсли;
КонецПроцедуры
//Контролы прогресса !!!

// Вывводим информацию о ходе операции
// 
// Параметры:
//	текстОповещения - строка сообщения,
//	Статус - перечисление СтатусСообщения,
//  Уровень - отступ при выводе сообщения
//
Процедура Написать(текстОповещения, Статус, Уровень = 0) Экспорт;
	Если ТекстовыйКонтрол <> Неопределено Тогда
		ТекстовыйКонтрол.Заголовок = текстОповещения;
	КонецЕсли;
	префикс = "";
	пока уровень > 0 цикл
		префикс = префикс+"  ";
		уровень = уровень - 1;
	КонецЦикла;
	Сообщить(префикс+текстОповещения, Статус);
	Если АвтоСинхронизация Тогда
		ужр = УровеньЖурналаРегистрации.Информация;
		
		если Статус = СтатусСообщения.ОченьВажное тогда
			ужр = УровеньЖурналаРегистрации.Ошибка;
		иначеесли Статус = СтатусСообщения.Важное тогда
			ужр = УровеньЖурналаРегистрации.Ошибка;
		иначеесли Статус = СтатусСообщения.Внимание тогда
			ужр = УровеньЖурналаРегистрации.Предупреждение;
		иначеесли Статус = СтатусСообщения.Обычное тогда
			ужр = УровеньЖурналаРегистрации.Информация;
		иначеесли Статус = СтатусСообщения.БезСтатуса тогда
			ужр = УровеньЖурналаРегистрации.Примечание;
		конецесли;
		
		ЗаписьЖурналаРегистрации("Автосинхронизация", ужр,,,текстОповещения);
	КонецЕсли;
КонецПроцедуры  


// выводим имя элемента, чтобы видеть кому принадлежат выше выведенные ошибки в панели сообщений
Процедура ПроверкаРезультата(Элемент, Рез)	
	если не рез тогда
		Написать(" - объект: "+Элемент, СтатусСообщения.Информация, 2);
	конецесли;
КонецПроцедуры

//Выгрузка в Тиллипад -->
Процедура ЗаполнитьПоляСтроки(ВнешняяСтрока, МестнаяСтрока, РеквизитыСтроки)
	  Для Каждого Реквизит из РеквизитыСтроки Цикл
		реквизитСтроки = МестнаяСтрока[Реквизит.Имя];
		ТипЗначения = ТипЗнч(реквизитСтроки);  
		Если ПростыеТипы.СодержитТип(ТипЗначения) Тогда
			значение = реквизитСтроки
		ИначеЕсли ТипСправочники.СодержитТип(ТипЗначения) ИЛИ ТипДокументы.СодержитТип(ТипЗначения) Тогда 
			Значение = Строка(реквизитСтроки.УникальныйИдентификатор());
		ИначеЕсли ТипПеречисления.СодержитТип(ТипЗначения) Тогда
			Значение = Строка(реквизитСтроки);

		Иначе
			Значение = Строка(реквизитСтроки);
		КонецЕсли;
		
		//todo необходимо проверять обязательные поля!!!!
		Если (МестнаяСтрока.Метаданные().ПолноеИмя()="Справочник.Номенклатура") и (МестнаяСтрока.ЭтоГруппа = Ложь) и (Реквизит.Имя = "БазоваяЕдиницаИзмерения") тогда
			Если ПустаяСтрока(Значение)или( РеквизитСтроки.ПолучитьОбъект() = Неопределено) тогда
				Написать("У элемента <"+МестнаяСтрока.Наименование+"> не указана единица измерения!", СтатусСообщения.Внимание, 1);
			КонецЕсли;
		КонецЕсли;	
		
		ВнешняяСтрока.SetField(Реквизит.Имя, значение);

	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьВТиллипад() Экспорт;
	Написать("Начало выгрузки в Tillypad", СтатусСообщения.Информация);

	ЗагрузкаВТиллипад = ЭкспортТП.GetDataManagerToTillypad();
	
	Сущность = ЗагрузкаВТиллипад.GetNextEntity();

	Пока ПустаяСтрока(Сущность) = Ложь Цикл 

		ТипОбъекта = Сущность.Type;
		ТипСущ = ТипСущности(типОбъекта);
		ИмяСущ = ИмяСущности(ТипОбъекта);
		Написать("Загружаем в Tillypad " + ИмяСущ, СтатусСообщения.Информация);
		
		Если ТипСущ = "СПРАВОЧНИК" Тогда
			МестныйОбъект = Справочники[ИмяСущ];
			МетаданныеСущности = МестныйОбъект.ПустаяСсылка().Метаданные();
			РеквизитыЗаголовка = МетаданныеСущности.реквизиты;
			
			ЕстьИерархия = МетаданныеСущности.Иерархический;
			ЭтоДокумент = ложь;
		Иначе
			ЕстьИерархия = Ложь;
			
			МестныйОбъект = Документы[ТипСущ];
			МетаданныеСущности = МестныйОбъект.ПустаяСсылка().Метаданные();
			РеквизитыЗаголовка = МетаданныеСущности.реквизиты;
			ЭтоДокумент = Истина;

		КонецЕсли; 		

		//туду Отбор: ПараметрыОтбора = Сущность.GetFilter();
		
		Выборка = МестныйОбъект.Выбрать();
		Пока Выборка.Следующий()  Цикл
			Объект = Выборка.ПолучитьОбъект();
			Если Объект.ПометкаУдаления Тогда 
				Продолжить;
			КонецЕсли;
	        ВнешнийОбъект = Сущность.CreateNew();
			ЗаголовокВнешнегоОбъекта = ВнешнийОбъект.GetHeader();
			
			ЗаполнитьПоляСтроки(ЗаголовокВнешнегоОбъекта, Объект, РеквизитыЗаголовка);
			Если ЭтоДокумент Тогда
				ЗаголовокВнешнегоОбъекта.SetField("Дата", Объект["Дата"]);
				ЗаголовокВнешнегоОбъекта.SetField("Номер", Объект["Номер"]);
			Иначе
				ЗаголовокВнешнегоОбъекта.SetField("Наименование", Объект["Наименование"]);
			КонецЕсли;
			//Для Каждого Реквизит из РеквизитыЗаголовка Цикл
			//	ВнешнийОбъект.SetField(Реквизит, Объект[Реквизит]);
			//КонецЦикла;
			ЗаголовокВнешнегоОбъекта.SetField("Код", Объект["Код"]);
			ЗаголовокВнешнегоОбъекта.SetField("УникальныйИдентификатор", Строка(Объект.Ссылка.УникальныйИдентификатор()));
			Если ЕстьИерархия Тогда
				Если Объект.ЭтоГруппа Тогда
					//ЗаголовокВнешнегоОбъекта.SetField("ЭтоГруппа", Истина);
					ЗаголовокВнешнегоОбъекта.SetIsGroup();
				КонецЕсли;
				Если НЕ Объект.Родитель.Пустая() Тогда
					ЗаголовокВнешнегоОбъекта.SetField("Родитель", Строка(Объект.Родитель.УникальныйИдентификатор()));

					//ЗаголовокВнешнегоОбъекта.SetParentID(Объект.Родитель.УникальныйИдентификатор());
				КонецЕсли;
			КонецЕсли;
			
			ТабЧасть = ВнешнийОбъект.GetNextItems();
			Пока ПустаяСтрока(ТабЧасть) = 0 Цикл
				
				ИмяТаблицы =  Объект[ТабЧасть.Name];
				МестнаяТаблица =  Объект[ИмяТаблицы];
				РеквизитыТаблицы = МестнаяТаблица.Метаданные().Реквизиты;
				Для Каждого Строка из МестнаяТаблица Цикл
					ВнешняяСтрока = ТабЧасть.Append();
					ЗаполнитьПоляСтроки(ВнешняяСтрока, Строка, РеквизитыТаблицы);
				КонецЦикла;
				//ЗаголовокВнешнегоОбъекта.SetParentID(Объект.Родитель.УникальныйИдентификатор());
			КонецЦикла;		
		КонецЦикла;
		
		Сущность.Post();
		Сущность = ЗагрузкаВТиллипад.GetNextEntity();
	КонецЦикла;
	Написать("Конец выгрузки в Tillypad", СтатусСообщения.Информация);

КонецПроцедуры
//Выгрузка в Тиллипад !!!

Процедура ЗагрузитьИзТиллипада(НачалоПеридода, КонецПериода, Группы) Экспорт;
	ОбъектыНаУдаление = ЭкспортТП.GetDocumentsToDelete(НачалоПеридода, КонецПериода, Группы);
	
	УдалитьДокументы(ОбъектыНаУдаление);
	ОбъектыНаУдаление = 0; //отпускаем ОЛЕ-объект
	СписокСущностей = ЭкспортТП.GetEntities(НачалоПеридода, КонецПериода, Группы);
	УстановитьМаксЗначение_ИндикаторОбщий(СписокСущностей.Count);	
	СледШаг_Общий(0);
	Пока Истина Цикл 
		попытка
			Сущность = неопределено;
			Сущность = СписокСущностей.GetNextEntity();
		Исключение
			ошибка = ОписаниеОшибки();
			Если Найти(ошибка, "NotFillParam")>0 тогда
				н = Найти(ошибка, "<")+1;
				к = Найти(ошибка, ">");
				Парам = Сред(ошибка, н, к-н);
				// ищем кнопку данного параметра, чтобы вызвать форму настройки
				КнопкаНайдена = Ложь;
				Ф = ПолучитьФорму("фмИмпортИзТиллипад");
				Кнопки = Ф.ЭлементыФормы.кпКоманды.Кнопки.Действия.Кнопки.кмПодменюПараметы.Кнопки;
				для каждого Кн из Кнопки цикл
					если Кн.Текст = Парам тогда
						КнопкаНайдена = Истина;
						Выполнить("Ф."+Кн.Действие+"(Кн)");
						Сущность = СписокСущностей.GetNextEntity();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если не КнопкаНайдена тогда
					ВызватьИсключение;
				КонецЕсли;
			Иначе
				ВызватьИсключение;
			КонецЕсли;				
		КонецПопытки;
		Если ПустаяСтрока(Сущность) тогда
             прервать;
		КонецЕсли;
		УстановитьМаксЗначение_ИндикаторЭлементов(Сущность.Count);
		СледШаг(0);
		Объект = Сущность.GetObject();
		ЗакачатьДанные(Объект, Объект.Type, Ложь);
		СледШаг_Общий();
	КонецЦикла;	
КонецПроцедуры

Процедура ЗагрузитьИзТиллипада_Справочники() Экспорт;
	СписокСущностей = ЭкспортТП.GetEntities(Дата(1,1,1), Дата(1,1,1), ""); //++МС третий параметр список групп строкой
	УстановитьМаксЗначение_ИндикаторОбщий(СписокСущностей.Count);	
	СледШаг_Общий(0);
	Пока Истина Цикл 
		попытка
			Сущность = неопределено;
			Сущность = СписокСущностей.GetNextEntity();
		Исключение
			ошибка = ОписаниеОшибки();
			Если Найти(ошибка, "NotFillParam")>0 тогда
				н = Найти(ошибка, "<")+1;
				к = Найти(ошибка, ">");
				Парам = Сред(ошибка, н, к-н);
				// ищем кнопку данного параметра, чтобы вызвать форму настройки
				КнопкаНайдена = Ложь;
				Ф = ПолучитьФорму("фмИмпортИзТиллипад");
				Кнопки = Ф.ЭлементыФормы.кпКоманды.Кнопки.Действия.Кнопки.кмПодменюПараметы.Кнопки;
				для каждого Кн из Кнопки цикл
					если Кн.Текст = Парам тогда
						КнопкаНайдена = Истина;
						Выполнить("Ф."+Кн.Действие+"(Кн)");
						Сущность = СписокСущностей.GetNextEntity();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если не КнопкаНайдена тогда
					ВызватьИсключение;
				КонецЕсли;
			Иначе
				ВызватьИсключение;
			КонецЕсли;				
		КонецПопытки;
		Если ПустаяСтрока(Сущность) тогда
             прервать;
		КонецЕсли;
		УстановитьМаксЗначение_ИндикаторЭлементов(Сущность.Count);
		СледШаг(0);
		Объект = Сущность.GetObject();
		ЗакачатьДанные_Справочники(Объект, Объект.Type, Ложь);
		СледШаг_Общий();
	КонецЦикла;	
КонецПроцедуры

//Запись типовых операций -->
 Процедура ДобавитьПараметр(ТиповаяОперация, имя, Представление, ТипПар, Обязательный, НеЗапрашивать, ПоУмолчанию = неопределено)
	стр = ТиповаяОперация.Параметры.Добавить();	 
	стр.Имя = Имя;
	стр.Представление = Представление;
	
	стр.Обязательный = Обязательный;
	стр.НеЗапрашивать = НеЗапрашивать;
	стр.Значение = ПоУмолчанию;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип(ТипПар));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	стр.Тип = Новый ХранилищеЗначения(ОписаниеТиповС);
	
КонецПроцедуры

 Процедура ДобавитьФормулу(Поле, Формула, формулы);
	формулы[Поле] = Формула;
КонецПроцедуры

 Функция ДобавитьПроводкуБУ(то, СчетДт, СчетКт, Содержание, Условие, Формулы)
//	Стр = то.Хозрасчетный.Добавить();
//	Если СчетДт <> неопределено Тогда
//		Стр.СчетДт =  ПланыСчетов.Хозрасчетный[СчетДт];
//	КонецЕсли;
//	Если СчетКт <> неопределено Тогда
//		Стр.СчетКт =  ПланыСчетов.Хозрасчетный[СчетКт];
//	КонецЕсли;

//	Стр.Содержание = Содержание;
//	Стр.Условие = Условие;
//	стр.Формулы = ЗначениеВСтрокуВнутр(Формулы);
//	Возврат(Стр);
КонецФункции

Функция ДобавитьПроводкуНУ(то, СчетДт, СчетКт, Содержание, Условие, Формулы)
//	
//	Стр = то.Налоговый.Добавить();
//	Если СчетДт <> неопределено Тогда
//		Стр.СчетДт =  ПланыСчетов.Налоговый[СчетДт];
//	КонецЕсли;
//	Если СчетКт <> неопределено Тогда
//		Стр.СчетКт =  ПланыСчетов.Налоговый[СчетКт];
//	КонецЕсли;
//	
//	Стр.Содержание = Содержание;
//	Стр.Условие = Условие;
//	стр.Формулы = ЗначениеВСтрокуВнутр(Формулы);
//	
//	НУ = Перечисления.ВидыУчетаПоПБУ18.НУ;
//	Стр.ВидУчетаДт = НУ;
//	Стр.ВидУчетаКт = НУ;
//	
//	Возврат(Стр);
КонецФункции

Функция ПолучитьТиповуюОперацию(Имя)
	//то = Справочники.ТиповыеОперации.НайтиПоНаименованию(Имя, истина, );
	//
	//Если то.Пустая() Тогда
	//	то = Справочники.ТиповыеОперации.СоздатьЭлемент();
	//	то.Наименование = Имя;
	//	то.ФормулаСодержания = """" + Имя + """";
	//Иначе
	//	то = то.ПолучитьОбъект();
	//	то.Хозрасчетный.Очистить();
	//	то.Параметры.Очистить();
	//КонецЕсли;
	//Возврат(то);
КонецФункции

//Запись типовых операций !!!

Функция ПустоеЗначениеTP(Реквизит)  Экспорт
	Если Реквизит = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
    _тип = ТипЗнч(Реквизит);
	Если _тип = Тип("Строка") Тогда
		Возврат ПустаяСтрока(Реквизит);
	ИначеЕсли _тип = Тип("Число") Тогда
		Если Реквизит = 0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли _тип = Тип("Дата") Тогда
		Если Реквизит = Дата('00010101') Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли _тип <> Тип("Булево") тогда
		Возврат Реквизит.Пустая();
	КонецЕсли;
   
КонецФункции

Функция ПреобразоватьвСчетБУ_TP(СчетБУ, Дата) Экспорт
	А = 0;
	если Метаданные.Имя = "ЗарплатаИУправлениеПерсоналом" тогда
		Выполнить("А = БухгалтерскийУчетДополнительный.ПреобразоватьСчетаБУвСчетНУ(Новый Структура(""СчетБУ, "", СчетБУ), , , Дата)");
	иначе
		Выполнить("А = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура(""СчетБУ, "", СчетБУ), , , Дата)");
	КонецЕсли;
	Возврат(А);
КонецФункции
 
Функция ИмяСущности(Строка) Экспорт;
	Возврат(Прав(Строка, СтрДлина(Строка) - Найти(Строка,".")));
КонецФункции

Функция СинонимСущности(ИмяСущности) Экспорт;
	Возврат(Метаданные.Справочники[ИмяСущности].Синоним);
КонецФункции

Функция ТипСущности(Строка) Экспорт;
	Возврат(Врег(Лев(Строка,Найти(Строка,".")-1)));
КонецФункции

Функция ПолучитьСсылкуДок(ИмяСущности, строкаГУИД) Экспорт
	ГУИД = Новый УникальныйИдентификатор(строкаГУИД);
	Возврат Документы[ИмяСущности].ПолучитьСсылку(ГУИД);
КонецФункции

Функция ПолучитьСсылкуСпр(ИмяСущности, строкаГУИД) Экспорт;
	Если (строкаГУИД = "") ИЛИ (строкаГУИД = неопределено) Тогда
		Возврат Справочники[ИмяСущности].ПустаяСсылка();
	Иначе
		ГУИД = Новый УникальныйИдентификатор(строкаГУИД);
		Возврат Справочники[ИмяСущности].ПолучитьСсылку(ГУИД);	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьГуидЭлемента(Ссылка) Экспорт;
	Если (Ссылка = неопределено) ИЛИ (Ссылка.Пустая() = 1) ИЛИ (Найти(Ссылка, "<Объект не найден> (") = 1) Тогда
		Возврат ""
	Иначе
		Возврат Строка(Ссылка.УникальныйИдентификатор());
	КонецЕсли
КонецФункции

Функция ПолучитьНастройкиTP(Заголовок, Организация) 
	
	Настройки = РегистрыСведений.НастройкиTP.СоздатьНаборЗаписей();
	Настройки.Отбор.Организация.Установить(Организация);
	Настройки.Прочитать();
	Если Настройки.Количество() = 0 Тогда
		Настройки.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
		Настройки.Прочитать();	
		Если Настройки.Количество() = 0 Тогда
			РС = ПолучитьФорму("РегистрСведений.НастройкиTP.Форма.ФормаЗаписи");
			Орг = РС.ЭлементыФормы.Найти("Организация");
			Орг.Значение = Организация;
			РС.Открыть();
			ВызватьИсключение "Не заполнены настройки для организации """ + Организация + """
			|После заполнения, повторите синхронизацию.";
		КонецЕсли;
	КонецЕсли;
	Возврат Настройки[0];
	
КонецФункции

Функция ПолучитьЗначение(Атрибут, НастройкиTP)
	ТипАтр = Врег(атрибут.Type);
 	Значение = атрибут.value;
	Попытка
		ТипСущ = ТипСущности(ТипАтр);
		Если ТипСущ = "ДОКУМЕНТ" Тогда
			Значение = ПолучитьСсылкуДок(ИмяСущности(ТипАтр), Значение);
		ИначеЕсли ТипСущ = "СПРАВОЧНИК" Тогда
			Значение = ПолучитьСсылкуСпр(ИмяСущности(ТипАтр), Значение);
		ИначеЕсли ТипСущ = "ПЕРЕЧИСЛЕНИЕ" Тогда
			Значение = Перечисления[ИмяСущности(ТипАтр)][Значение];
		ИначеЕсли ТипСущ = "ПЛАНСЧЕТОВ" Тогда
			Значение = ПланыСчетов[ИмяСущности(ТипАтр)].НайтиПоКоду(Значение);
		ИначеЕсли ТипАтр = "РЕГИСТРСВЕДЕНИЙ.НАСТРОЙКИTP" Тогда
			Значение = НастройкиTP[Значение]
		ИначеЕсли ТипСущ = "РЕГИСТРСВЕДЕНИЙ" Тогда
			//Отбор = Новый Структура;
			//Отбор.Вставить("Организация", Организация);
			//Настройки = РегистрыСведений.НастройкиTP.Получить(Отбор);
			//Значение = Настройки[Значение];
		КонецЕсли;
	Исключение
	КонецПопытки;
	
    Возврат Значение;
КонецФункции

Функция ЗначениеРеквизита(Реквизит, ТипСущ) Экспорт
	Попытка
		Если ТипСущ = "ДОКУМЕНТ" ИЛИ ТипСущ = "СПРАВОЧНИК" Тогда
			Значение = ПолучитьГуидЭлемента(Реквизит);
		Иначе
			Значение = Строка(Реквизит);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
    Возврат Значение;
КонецФункции

//Функция НазванияРеквизитовСправочника

//&НаСервереБезКонтекста
Функция СведенияОВидеОплаты(ВидОплаты)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОплаты, "Контрагент,ДоговорКонтрагента,СчетУчетаРасчетов,Организация");	
КонецФункции

Функция ПрисвоитьАтрибут(Объект, Атрибут, НастройкиTP)  
	рез = истина;
 	Название = атрибут.Name;
	//++МС 29.10.2017
	Если Название = "ВидОперации" Или Название = "СпособЗачетаАвансов" 
		Или Название = "СтатьяПрочихДоходовРасходов" Или Название = "Себестоимость" Тогда
		возврат рез;
	ИначеЕсли (ТипЗнч(Объект) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Или
		ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг")) И Название = "Склад" Тогда
		Название = "СкладОрдер";
	КонецЕсли;
	//--МС 29.10.2017
	Значение = ПолучитьЗначение(Атрибут, НастройкиTP);
	//++МС 30.10.2017 Исправим ед.измерения
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") 
	//	//И ТипЗнч(Объект[Название]) = Тип("СправочникСсылка.ЕдиницыИзмерения")
	//	И ЗначениеЗаполнено(Объект.Номенклатура) Тогда
	//		Значение = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(
	//			Значение.Наименование, 
	//			Истина,
	//			,
	//			Объект.Номенклатура);
	//КонецЕсли;
	//--МС 30.10.2017
	
	Если ТипЗнч(Объект[Название]) = Тип("Булево") Тогда
		Значение = Булево(Число(Значение));
	КонецЕсли;
    Объект[Название] = Значение;
	если не ЗначениеЗаполнено(Объект[Название]) тогда
		//для документа
		//т = Объект.Метаданные().Реквизиты.Найти(Название).ПроверкаЗаполнения;	
		//для табличной части
		мд = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
		т = мд.Реквизиты.Найти(Название).ПроверкаЗаполнения;
		если т = ПроверкаЗаполнения.ВыдаватьОшибку тогда
			стр = "Ошибка настройки синхронизации. Запрос вернул неверное значение для обязательного поля: ["+Значение+"]. ";
			стр = стр+"Объект: ["+мд+"] Атрибут: ["+Название+"]";
			Написать(стр, СтатусСообщения.Внимание, 2);
			рез = ложь;
		конецесли;	
	конецесли;	
	
	//++МС 31.10.2017
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(мТекЕдИзм) Тогда
		Объект.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(
				мТекЕдИзм.Наименование, 
				Истина,
				,
				Объект.Номенклатура);
		мТекЕдИзм = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	КонецЕсли;
	//--МС 31.10.2017
	возврат рез;
КонецФункции

//++МС
Функция ПрисвоитьАтрибутНом(Объект, АтрибутИмя, АтрибутЗнач, НастройкиTP)  
	рез = истина;
 	Название = АтрибутИмя;
	Значение = АтрибутЗнач;
	
	Если ТипЗнч(Объект[Название]) = Тип("Булево") Тогда
		Значение = Булево(Число(Значение));
	КонецЕсли;
	
	// ++МС 06.11.2017
	//Объект[Название] = Значение;
	Если АтрибутИмя = "Родитель" Тогда
		Если Объект.Ссылка = Значение Тогда // Циклическая ссылка на самого себя
			Значение = Справочники.Номенклатура.ПустаяСсылка();
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект[Название]) Тогда	// Заполнять родителя только при его отсутствии
			Объект[Название] = Значение;	
		КонецЕсли;
	Иначе
		Объект[Название] = Значение;
	КонецЕсли;
	// --МС 06.11.2017
	
	если не ЗначениеЗаполнено(Объект[Название]) тогда
		//для документа
		//т = Объект.Метаданные().Реквизиты.Найти(Название).ПроверкаЗаполнения;	
		//для табличной части
		мд = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
		//++МС
		Если Название <> "Родитель" Тогда
			т = мд.Реквизиты.Найти(Название).ПроверкаЗаполнения;
			если т = ПроверкаЗаполнения.ВыдаватьОшибку тогда
				стр = "Ошибка настройки синхронизации. Запрос вернул неверное значение для обязательного поля: ["+Значение+"]. ";
				стр = стр+"Объект: ["+мд+"] Атрибут: ["+Название+"]";
				Написать(стр, СтатусСообщения.Внимание, 2);
				рез = ложь;
			конецесли;	
		КонецЕсли;
	конецесли;	
	возврат рез;
КонецФункции
//--МС

//Функция ПолучитьВидДоговора(ВидДоговора)
//	результат = Неопределено;
//	для каждого значение из Перечисления.ВидыДоговоровКонтрагентов цикл
//		если значение = ВидДоговора тогда
//			результат = значение;
//			прервать;
//		КонецЕсли;
//	КонецЦикла;
//	если не ЗначениеЗаполнено(результат) тогда
//		Написать("   !!!  Вид договора '"+стрВидДоговора+"' не найден!", СтатусСообщения.Внимание);
//	КонецЕсли;
//	возврат результат;
//КонецФункции

Процедура УстановитьДоговор(Элемент, СервисныеПоля, ТипОбъекта, НастройкиTP, Организация)
	
	ВидДоговора = ПолучитьСервисноеЗначение(СервисныеПоля, "ВидДоговора", типОбъекта, Ложь, НастройкиTP);
	Если ТипЗнч(ВидДоговора) = Тип("Строка") тогда
		результат = неопределено;
		для каждого значение из Перечисления.ВидыДоговоровКонтрагентов цикл
			если Строка(значение) = ВидДоговора тогда
				результат = значение;
				прервать;
			КонецЕсли;
		КонецЦикла;
		ВидДоговора = результат;
	////++МС 30.10.2017 ОТМЕНА - Использовать настройки Тилипада
	//ИначеЕсли ТипЗнч(ВидДоговора) = Тип("ПеречислениеСсылка.ВидыДоговоровКонтрагентов") тогда
	//	Если ТипЗнч(Элемент) = тип("ДокументОбъект.ПоступлениеТоваровУслуг") И НЕ ЗначениеЗаполнено(ВидДоговора) тогда
	//		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	//	КонецЕсли;
	//	//--МС 30.10.2017
	КонецЕсли;
	Если не ПустаяСтрока(ВидДоговора) тогда
		Если ПустоеЗначениеTP(Элемент.ДоговорКонтрагента) И (НастройкиTP <> неопределено) тогда
			//НазваниеДоговора =  ПолучитьСервисноеЗначение(СервисныеПоля, "НазваниеДоговора", типОбъекта, ложь);
			//ВидДоговора = ПолучитьВидДоговора(ВидДоговора);
			если не ЗначениеЗаполнено(ВидДоговора) тогда
				возврат;
			КонецЕсли;
			ДоговорНазвание =  НастройкиTP.Договор_Название;
			ДоговорКомментарийСодержит = НастройкиTP.Договор_КомментарийСодержит;
			Договор = НайтиДоговор(Элемент.Контрагент, ВидДоговора, ДоговорКомментарийСодержит, Организация);
			Если не ЗначениеЗаполнено(Договор) и НастройкиTP.Договор_Создавать Тогда
				Договор = СоздатьДоговор(Элемент.Контрагент, ВидДоговора, ДоговорКомментарийСодержит, ДоговорНазвание, НастройкиTP.Валюта, Организация);
			КонецЕсли;	
			Элемент.ДоговорКонтрагента = Договор;
		//	НазваниеДоговораПоУмолчанию = ПолучитьСервисноеЗначение(СервисныеПоля, "НазваниеДоговора_ПоУмолчанию", типОбъекта, ложь, НастройкиTP);
		//	Элемент.ДоговорКонтрагента  = ПолучитьДоговор(Элемент.Контрагент, ВидДоговора, НазваниеДоговора, НазваниеДоговораПоУмолчанию, НастройкиTP.Валюта, Организация); 
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры		

Функция НайтиВидОплаты(Организация, Контрагент);
	ВидОплаты = неопределено;
	Кол = 0;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Выборка = Справочники.ВидыОплатОрганизаций.Выбрать();
		Пока Выборка.Следующий() Цикл
			во = Выборка.ПолучитьОбъект();
			если во.Организация = Организация тогда
				если во.Контрагент = Контрагент тогда
					Кол = Кол +1;
					рез = во;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	иначе
		Написать("Не удалось определить ВидОплаты! Не установлен контрагент!", СтатусСообщения.Важное, 2);
	КонецЕсли;		
	если Кол > 1 тогда
		Написать("Не удалось определить ВидОплаты! Найдено "+Строка(Кол)+" видов оплаты для контрагента """+Контрагент+""" и организации """+Организация+"""!", СтатусСообщения.Важное, 2);
	иначеесли Кол = 1 тогда
		ВидОплаты = рез;
	конецесли;	
	возврат ВидОплаты;
КонецФункции

Процедура УстановитьВидОплаты(Элемент, Организация, Контрагент);
	ВидОплаты = НайтиВидОплаты(Организация, Контрагент);
	если ПустаяСтрока(ВидОплаты) тогда
		Ф = Справочники.ВидыОплатОрганизаций.ПолучитьФормуНовогоЭлемента();
		попытка 
			объект = Ф.Объект; 
		исключение
			объект = Ф;
		конецпопытки;
		объект.Контрагент = Контрагент;
		объект.Организация = Организация;
		объект.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПереводыВПути.Ссылка;
		объект.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта;
		Ф.ОткрытьМодально();
		ВидОплаты = НайтиВидОплаты(Организация, Контрагент);
	конецесли;
	если не ПустаяСтрока(ВидОплаты) тогда
		Элемент.ВидОплаты = ВидОплаты.Ссылка;
		Элемент.ДоговорКонтрагента = ВидОплаты.ДоговорКонтрагента;
		Элемент.СчетУчетаРасчетов = ВидОплаты.СчетУчетаРасчетов;
	иначе
		Написать("ВидОплаты для контрагента """+Контрагент+""" и организации """+Организация+""" не настроен!", СтатусСообщения.Важное, 2);		
	конецесли;	
КонецПроцедуры

Функция ИмпортАтрибутов(Элемент, Атрибуты, НастройкиTP)
	рез = истина;
	Пока Атрибуты.FetchNext() > 0 Цикл
		//++МС 30.10.2017
		// Элемент - строка
		Если Атрибуты.Name = "ЕдиницаИзмерения" Тогда
			//мТекЕдИзм = Атрибуты.Value;
			мТекЕдИзм = ПолучитьЗначение(Атрибуты, НастройкиTP);
		//Если не ПрисвоитьАтрибут(Элемент, Атрибуты, НастройкиTP) тогда
		ИначеЕсли не ПрисвоитьАтрибут(Элемент, Атрибуты, НастройкиTP) тогда
		//--МС 30.10.2017
			рез = ложь;
		конецесли;
	КонецЦикла;
	возврат рез;	
КонецФункции

// ++МС
Функция ИмпортАтрибутовНом(Элемент, Атрибуты, НастройкиTP)
	рез = истина;
	//СтруктураПолей = Новый Структура("Наименование,БазоваяЕдиницаИзмерения,Родитель,ЭтоГруппа");
	СтруктураПолей = Новый Структура;
	Пока Атрибуты.FetchNext() > 0 Цикл  	// Загружаем все атрибуты в структуру
		Если Атрибуты.Name = "БазоваяЕдиницаИзмерения" Тогда
			СтруктураПолей.Вставить(Атрибуты.Name, ПолучитьСсылкуСпр("КлассификаторЕдиницИзмерения", Атрибуты.Value));
		ИначеЕсли Атрибуты.Name = "Родитель" Тогда
			СтруктураПолей.Вставить(Атрибуты.Name, ПолучитьСсылкуСпр("Номенклатура", Атрибуты.Value));
		Иначе
			СтруктураПолей.Вставить(Атрибуты.Name, Атрибуты.Value);
		КонецЕсли;
	КонецЦикла;
	// ++МС 29.10.2017 Поиск номенклатуры по наименованию
	Если Элемент = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Отбор = Новый Структура("Наименование");
		Отбор.Наименование = СтруктураПолей.Наименование;
		//Отбор.ЭтоГруппа = СтруктураПолей.Свойство("ЭтоГруппа") = Истина;

		ВыборкаЭлементов = Справочники.Номенклатура.Выбрать(,,Отбор, "Наименование Убыв");
		Пока ВыборкаЭлементов.Следующий() Цикл
			Если Элемент <> Справочники.Номенклатура.ПустаяСсылка() Тогда
				//Сообщить("Для номенклатуры """ + СтруктураПолей.Наименование + """ найдено более одного совпадения по наименованию");
				Прервать;
			ИначеЕсли ВыборкаЭлементов.Ссылка.ЭтоГруппа = СтруктураПолей.Свойство("ЭтоГруппа") Тогда
				Элемент = ВыборкаЭлементов.Ссылка.ПолучитьОбъект();	
			КонецЕсли;
		КонецЦикла;
		//Элемент = Справочники.Номенклатура.НайтиПоНаименованию(СтруктураПолей.Свойство("Наименование"), Истина);
	КонецЕсли;
	// --МС 29.10.2017
	
	Если Элемент = Справочники.Номенклатура.ПустаяСсылка() Тогда  // Создаем новый
		Если СтруктураПолей.Свойство("ЭтоГруппа") Тогда
			Элемент = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			Элемент = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
	КонецЕсли;
	
	// Базовая ед.изм
	Если НЕ Элемент.ЭтоГруппа Тогда
		если не ПрисвоитьАтрибутНом(Элемент, 
			"БазоваяЕдиницаИзмерения",
			СтруктураПолей.БазоваяЕдиницаИзмерения, НастройкиTP) тогда
			рез = ложь;
		конецесли;
	КонецЕсли;
	
	// Наименование
	Если не ПрисвоитьАтрибутНом(Элемент, 
		"Наименование",
		СтруктураПолей.Наименование, НастройкиTP) тогда
		рез = ложь;
	конецесли;

	// Родитель
	Если ЗначениеЗаполнено(СтруктураПолей.Родитель) Тогда
		если не ПрисвоитьАтрибутНом(Элемент, 
			"Родитель",
			СтруктураПолей.Родитель, НастройкиTP) тогда
			рез = ложь;
		конецесли;
	КонецЕсли;
	
	возврат рез;	
КонецФункции
// --МС

Процедура ЭкспортАтрибутов(Элемент, Атрибуты)
	Пока Атрибуты.FetchNext() > 0 Цикл
		Атрибуты.Value = ЗначениеРеквизита(Элемент[Атрибуты.Name], ТипСущности(Атрибуты.Type))
	КонецЦикла;		
КонецПроцедуры


Функция НайтиИПрисвоитьАтрибут(Атрибуты, ИмяАтрибута, Объект)
	рез = истина;
	Атрибут = Атрибуты.FieldByName(ИмяАтрибута);
	Если Атрибут <> NULL Тогда
		если не ПрисвоитьАтрибут(Объект, Атрибут,) тогда
			рез = ложь;
		конецесли;
	КонецЕсли;
	возврат рез;	
КонецФункции


Процедура СоздатьЭлементыСправочника(ВнешнийОбъект, типОбъекта)
	ВходящиеАтрибуты = ВнешнийОбъект.GetHeaderExportFields();
	ИсходящиеАтрибуты = ВнешнийОбъект.GetHeaderImportFields();
	
	Пока ВнешнийОбъект.FetchNext() > 0  Цикл
		
		рез = истина;
		
		НомерСвязки = ВнешнийОбъект.Get1C_ID();
		
		МестныйОбъект = Справочники[ИмяСущности(типОбъекта)];
		СпроситьПользователя = ложь;

		//++МС
		//Если НЕ ПустаяСтрока(НомерСвязки) Тогда
		Если НЕ ПустаяСтрока(НомерСвязки) И НомерСвязки <> "00000000-0000-0000-0000-000000000000" Тогда
		//--МС			
			Ссылка = ПолучитьСсылкуСпр(ИмяСущности(типОбъекта), НомерСвязки);
			Если Ссылка.ПолучитьОбъект() = Неопределено  Тогда
				СпроситьПользователя = истина;
				ВнешнийОбъект.DropLink();
				Ссылка = МестныйОбъект.ПустаяСсылка();
			КонецЕсли;
	 	Иначе
			Ссылка = МестныйОбъект.ПустаяСсылка();
		КонецЕсли;	
		
		Если Ссылка.Пустая() Тогда
			//++МС
			//элемент = МестныйОбъект.СоздатьЭлемент();
			Если ИмяСущности(типОбъекта) = "Номенклатура" Тогда
				// ++МС 29.10.2017 Поиск по имени в процедуре ИмпортАтрибутовНом т.к.
				// там происходит извлечение атрибутов
				элемент = МестныйОбъект.ПустаяСсылка();
			Иначе
				элемент = МестныйОбъект.СоздатьЭлемент();
			КонецЕсли;
			//--МС
			НужноСвязать = 1;
		Иначе
			элемент = Ссылка.ПолучитьОбъект();
		 	НужноСвязать = 0;
		КонецЕсли;				
		
		//++МС
		//если не ИмпортАтрибутов(Элемент, ВходящиеАтрибуты, ) тогда
		//	рез = ложь;
		//конецесли;
		Если ИмяСущности(типОбъекта) = "Номенклатура" Тогда
			если не ИмпортАтрибутовНом(Элемент, ВходящиеАтрибуты, ) тогда
				рез = ложь;
			конецесли;
			//++МС 29.10.2017 Вид номенклатуры
			Если НЕ ЗначениеЗаполнено(Элемент.ВидНоменклатуры) тогда
				Элемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Загружено из Тиллипад");
			КонецЕсли;
			//--МС 29.10.2017
		Иначе
			если не ИмпортАтрибутов(Элемент, ВходящиеАтрибуты, ) тогда
				рез = ложь;
			конецесли;
		КонецЕсли;
		
		СпроситьПользователя = Ложь;
		//--МС
			
		Если СпроситьПользователя Тогда
			Ответ = Вопрос("Обнаружена ссылка на несуществующий объект 1С. Название элемента Tillypad: " 
				+ Символы.ВК + Символы.ПС + Элемент.Наименование + Символы.ВК + Символы.ПС 
				+ "Если такой объект 1С уже существует, то необходимо остановить "
				+ "закачку данных и вручную сопоставить объекты. Иначе будет создан новый объект 1С. "
				+ "Остановить закачку?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Внимание!" );
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ВызватьИсключение "Закачка прервана. Необходимо вручную сопоставить объекты";
				КонецЕсли;
		КонецЕсли;    		
		
		Попытка
			Если СокрЛ(Элемент.Код) = "" Тогда
				Элемент.УстановитьНовыйКод();
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		ПроверкаРезультата(Элемент, рез);
		
		//++МС
		//Элемент.Записать();   
		Попытка
			Элемент.Записать();   
			// Если это номенклатура проверить и заполнить единицы измерения
			Если ИмяСущности(типОбъекта) = "Номенклатура" И НЕ Элемент.ЭтоГруппа Тогда
				ПроверитьИЗаполнитьЕдиницы(Элемент);
			КонецЕсли;
		Исключение
			Сообщить("Ошибка записи """ + Элемент.Ссылка + """. " + ОписаниеОшибки());	
		КонецПопытки;
		//--МС
		
		Попытка
			ЭкспортАтрибутов(Элемент, ИсходящиеАтрибуты);
			ВнешнийОбъект.SetReferenceLink(Строка(Элемент.Ссылка.УникальныйИдентификатор()));
		Исключение
			Элемент.Удалить();
			ВызватьИсключение;
		КонецПопытки;
		

		СледШаг();
	КонецЦикла;	 
	
КонецПроцедуры

Процедура ПроверитьИЗаполнитьЕдиницы(НоменклатураОбъект)
	
	лЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(
			НоменклатураОбъект.БазоваяЕдиницаИзмерения.Наименование, 
			Истина,
			,
			НоменклатураОбъект.Ссылка);
	Если НЕ ЗначениеЗаполнено(лЕдиницаИзмерения) Тогда
		// Создать
		лЕдиницаИзмеренияОб = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		лЕдиницаИзмеренияОб.Наименование 	= НоменклатураОбъект.БазоваяЕдиницаИзмерения.Наименование;
		лЕдиницаИзмеренияОб.Владелец 		= НоменклатураОбъект.Ссылка;
		лЕдиницаИзмеренияОб.Коэффициент	= 1;
		Попытка
			лЕдиницаИзмеренияОб.Записать();
			лЕдиницаИзмерения = лЕдиницаИзмеренияОб.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	лПерезаписатьНоменклатуру = Ложь;
	Если ЗначениеЗаполнено(лЕдиницаИзмерения) Тогда
		Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.ЕдиницаДляОтчетов) Тогда
			НоменклатураОбъект.ЕдиницаДляОтчетов = лЕдиницаИзмерения; лПерезаписатьНоменклатуру = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.ЕдиницаХраненияОстатков) Тогда
			НоменклатураОбъект.ЕдиницаХраненияОстатков = лЕдиницаИзмерения; лПерезаписатьНоменклатуру = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.ЕдиницаИзмеренияМест) Тогда
			НоменклатураОбъект.ЕдиницаИзмеренияМест = лЕдиницаИзмерения; лПерезаписатьНоменклатуру = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если лПерезаписатьНоменклатуру Тогда
		Попытка
			НоменклатураОбъект.Записать();
		Исключение
			Сообщить("Ошибка записи """ + НоменклатураОбъект.Ссылка + """. " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗакачатьСправочник(ВнешнийОбъект, типОбъекта)	
	
	Если ВнешнийОбъект.ReferenceLinkMode = 0 Тогда
		ФормаПредварительногоСвязывания = ПолучитьФорму("фмПредварительноеСвязывание");
		ФормаПредварительногоСвязывания.ВнешнийОбъект = ВнешнийОбъект;
		ФормаПредварительногоСвязывания.ТипОбъекта = ИмяСущности(типОбъекта);
		ФормаПредварительногоСвязывания.СформироватьСписокЭлементовСопоставлений();
		Если ФормаПредварительногоСвязывания.НеобходимоСопоставление() Тогда 
			ФормаПредварительногоСвязывания.ОткрытьМодально();
			Если НЕ ФормаПредварительногоСвязывания.МожноПродолжитьСинхронизацию Тогда
				ВызватьИсключение "Закачка данных прервана"
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СоздатьЭлементыСправочника(ВнешнийОбъект, типОбъекта);

КонецПроцедуры


Процедура ЗаполнитьСчетаТабЧасти(СкриптФормированияТабЧасти, Объект, ТабличнаяЧасть, ИмяТабличнойЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	Выполнить(СкриптФормированияТабЧасти);
КонецПроцедуры

Функция ПолучитьСервисноеЗначение(СервисныеПоля, ИмяПоля, типОбъекта, обязательное = Истина, НастройкиTP = неопределено)
		Поле = СервисныеПоля.FieldByName(ИмяПоля);
		Если ПустаяСтрока(Поле)Тогда
			Если обязательное Тогда
				ВызватьИсключение "Не указано поле '" + ИмяПоля + "' (" + типОбъекта + ")";
			Иначе 
				Возврат("");
			КонецЕсли
		Иначе
			Возврат(ПолучитьЗначение(Поле, НастройкиTP));
		КонецЕсли;
КонецФункции

Процедура КорректировкаЗначенийПоУмолчанию(Элемент)
	рез = Элемент.Метаданные().ТабличныеЧасти;
	если рез <> Неопределено тогда
		// << обработка видов оплат
		рез = рез.Найти("Оплата");
		если рез <> Неопределено тогда
			рез = рез.Реквизиты.Найти("ВидОплаты");
			если рез <> Неопределено тогда
				таб = Элемент["Оплата"];
				для ы=0 по таб.Количество()-1 цикл
					строка = таб.Получить(ы);
					Попытка
						ВидОплаты = строка.ВидОплаты;
						Контрагент = строка.Контрагент;
						УстановитьВидОплаты(строка, Элемент.Организация, Контрагент);
					Исключение	
					КонецПопытки;										
				конеццикла;
			конецесли;
		конецесли;
		// обработка видов оплат >>
	конецесли;				
КонецПроцедуры

Процедура ЗакачатьДокумент(ВнешнийОбъект, типОбъекта)
	ВходящиеАтрибуты = ВнешнийОбъект.GetHeaderExportFields();
    ИсходящиеАтрибуты = ВнешнийОбъект.GetHeaderImportFields();
	СервисныеПоля = ВнешнийОбъект.GetHeaderServiceFields();
	
	СкриптФормированияТабЧасти = ПолучитьСкриптФормированияТабличнойЧасти(ИмяСущности(типОбъекта));
	
	Пока ВнешнийОбъект.FetchNext() > 0  Цикл
		рез=истина;
		МестныйОбъект = Документы[ИмяСущности(ТипОбъекта)]; // !МСВ - может искать док?
		               
		Элемент = МестныйОбъект.СоздатьДокумент();
	
		Элемент.Организация = ПолучитьСервисноеЗначение(СервисныеПоля, "Организация", типОбъекта);
		Если ПустаяСтрока(Элемент.Организация) Тогда
			ВызватьИсключение "Не указана организация!";
		КонецЕсли;
		НастройкиTP = ПолучитьНастройкиTP(ВходящиеАтрибуты, Элемент.Организация);
		
		если не ИмпортАтрибутов(Элемент, ВходящиеАтрибуты, НастройкиTP) тогда
			рез = ложь;
		конецесли;
		 
		// TODO Переделать ДОГОВОР на регистр сведений!!!
		УстановитьДоговор(Элемент, СервисныеПоля, ТипОбъекта, НастройкиTP, Элемент.Организация);

		УстановитьНомерДокумента(Элемент);
		
		//++МС 31.10.2017
		Если ТипЗнч(Элемент) = тип("ДокументОбъект.ПоступлениеТоваровУслуг") тогда
			//Элемент.ОтражатьВБухгалтерскомУчете 	= Истина;
			//Элемент.ОтражатьВНалоговомУчете         = Истина;
			Элемент.ОтражатьВУправленческомУчете	= Истина;
			
			Элемент.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
			Элемент.СкладОрдер = Справочники.Склады.НайтиПоНаименованию("Главный", Истина);
			Элемент.КурсВзаиморасчетов	= 1;
			Элемент.КратностьВзаиморасчетов = 1;
		//++МС 27.12.2017			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
			//Элемент.ОтражатьВБухгалтерскомУчете 	= Истина;
			//Элемент.ОтражатьВНалоговомУчете         = Истина;
			Элемент.ОтражатьВУправленческомУчете	= Истина;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументОбъект.ОприходованиеТоваров") Тогда
			//Элемент.ОтражатьВБухгалтерскомУчете 	= Истина;
			//Элемент.ОтражатьВНалоговомУчете         = Истина;
			Элемент.ОтражатьВУправленческомУчете	= Истина;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			Элемент.Контрагент = НастройкиTP.АктРеализация_Контрагент;
			Элемент.ТипЦен = НастройкиTP.АктРеализация_ТипЦен;
			Элемент.ОтражатьВУправленческомУчете	= Истина;
			Элемент.ДоговорКонтрагента = Элемент.Контрагент.ОсновнойДоговорКонтрагента;
			Элемент.Грузополучатель = Элемент.Контрагент;
			Элемент.ВалютаДокумента = Справочники.Валюты.НайтиПоНаименованию("руб.",Истина);
			// TODO: не берет из настроек, т.к. при загрузке атрибутов фильтруется. Разобраться
			Элемент.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
			Элемент.КурсВзаиморасчетов = 1;
			Элемент.КратностьВзаиморасчетов = 1;
			Элемент.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
			Элемент.ОтражатьВУправленческомУчете	= Истина;
			// TODO: не берет из настроек, т.к. при загрузке атрибутов фильтруется. Разобраться
			Элемент.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		//--МС 27.12.2017			
		КонецЕсли;
		//--МС 31.10.2017
		
		//--------------------------------------------------------------------------------
		ЭлементыВнешОбъекта = ВнешнийОбъект.GetNextItems();
		Пока ПустаяСтрока(ЭлементыВнешОбъекта) = 0 Цикл 
			ВходящиеАтрибутыТаблицы = ЭлементыВнешОбъекта.GetExportFields();
			СервисныеПоляТаблицы = ЭлементыВнешОбъекта.GetServiceFields();
			
			ТабличнаяЧасть =  Элемент[ЭлементыВнешОбъекта.Name];
			
			Если ТипЗнч(Элемент) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
				Пока ЭлементыВнешОбъекта.FetchNext() > 0 Цикл
					НоваяСтрока = ТабличнаяЧасть.Добавить();
					
					если не ИмпортАтрибутов(НоваяСтрока, ВходящиеАтрибутыТаблицы, НастройкиTP) тогда
						рез = ложь;
					конецесли;
					// ++МСВ 30.10.2017 Зачем каждый раз?
					//УстановитьДоговор(НоваяСтрока, СервисныеПоляТаблицы, ТипОбъекта, НастройкиTP, Элемент.Организация); 
					
					// Дозаполнить едизм
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
						//НоваяСтрока.ЕдиницаИзмерения = 
					КонецЕсли;
					// --МСВ 30.10.2017 
					
					//ЗаполнениеДокументов.Заполнить(Элемент, ДанныеЗаполнения);
					////???ЗаполнениеДокументов.Заполнить(Элемент,);
					
				КонецЦикла;	
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
				ЗагрузитьСтрокиСписаний(Элемент, ПолучитьСервисноеЗначение(СервисныеПоля, "ИД", типОбъекта));		
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументОбъект.ОприходованиеТоваров") Тогда
				ЗагрузитьСтрокиОприходований(Элемент, ПолучитьСервисноеЗначение(СервисныеПоля, "ИД", типОбъекта));		
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
				ЗагрузитьСтрокиРеализаций(Элемент, ПолучитьСервисноеЗначение(СервисныеПоля, "ИД", типОбъекта));		
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
				ЗагрузитьСтрокиПеремещений(Элемент, ПолучитьСервисноеЗначение(СервисныеПоля, "ИД", типОбъекта));		
			КонецЕсли;
			// заполнение табличной части из настроек 1с
			ИмяТабличнойЧасти = ЭлементыВнешОбъекта.Name;
			ФормироватьТиповыеРеквизиты = Элемент.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("Номенклатура") <> неопределено;
			Если ФормироватьТиповыеРеквизиты Тогда
				если не ПустаяСтрока(СкриптФормированияТабЧасти) тогда
					ЗаполнитьСчетаТабЧасти(СкриптФормированияТабЧасти, Элемент, ТабличнаяЧасть, ИмяТабличнойЧасти, Истина, Истина);
				конецесли;
			КонецЕсли;                                        
			
			ЭлементыВнешОбъекта = ВнешнийОбъект.GetNextItems();
		КонецЦикла;	
		
		//косяк в типовой конфигурации: мУчетнаяПолитикаНУ инициализируется при создании объекта, когда никаких данных нет 	
		Если ТипЗнч(Элемент) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
			УчетнаяПолитикаНеЗадана = Ложь;
		//!!!	Элемент.мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Элемент.Дата, УчетнаяПолитикаНеЗадана, Элемент.Организация, "Нал");
		КонецЕсли;
		
		////// Процедура 
		Попытка
			если Обработки.ИмпортTP.ПроверитьВерсию(Перечисления.ВерсииКонфигаTP.Версия20) тогда
				Выполнить("ЗаполнениеДокументовПоУмолчанию.ЗаполнитьСчетаПоУмолчанию(Элемент)");
			иначеесли Обработки.ИмпортTP.ПроверитьВерсию(Перечисления.ВерсииКонфигаTP.Версия30) тогда
				МестныйОбъект.ЗаполнитьСчетаУчетаРасчетов(Элемент);
			иначеесли Обработки.ИмпортTP.ПроверитьВерсию(Перечисления.ВерсииКонфигаTP.Версия30_27_9)или Обработки.ИмпортTP.ПроверитьВерсию(Перечисления.ВерсииКонфигаTP.Версия30_28) тогда
				//++МС 30.10.2017
				//МестныйОбъект.ЗаполнитьСчетаУчетаРасчетов(Элемент);
				//--МС 30.10.2017
			конецесли;
		Исключение
			// необязательное действие. Не во всех документах используются СчетаУчета
		КонецПопытки;
		
		// иногда заполнение по умолчанию отрабатывает не так как нужно.
		// эта функция предназначена для корректировки таких значений в документах.
		КорректировкаЗначенийПоУмолчанию(Элемент);
		
		ПроверкаРезультата(Элемент, рез);
		
		Элемент.Записать(РежимЗаписиДокумента.Запись,РежимПроведенияДокумента.Неоперативный);
		Попытка
			ВнешнийОбъект.SetDocumentLink(Строка(Элемент.Ссылка.УникальныйИдентификатор()), Элемент.Дата);  
		Исключение  
			Элемент.Удалить();
			ВызватьИсключение;
		КонецПопытки;
		
		Попытка
			ЭкспортАтрибутов(Элемент, ИсходящиеАтрибуты);
			фмИмпорт = ПолучитьФорму("фмИмпортИзТиллипад");
			Если фмИмпорт.фПроводитьДокументы Тогда 
				Элемент.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
			//++МС 17.12.2017
			Если ТипЗнч(Элемент) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
				мСписанияТоваров.Добавить(Элемент.Ссылка);
			КонецЕсли;
			//--МС 17.12.2017
		Исключение
			//ВызватьИсключение;
			Написать("Документ " + Элемент.Номер + " не проведен", СтатусСообщения.ОченьВажное, 1);
		КонецПопытки;

		СледШаг();
	КонецЦикла;	
	
	//++МС 17.12.2017
	//--МС 17.12.2017
КонецПроцедуры

Процедура ЗакачатьОперации(ВнешнийОбъект, ИмяОперации)
//	Атрибуты = ВнешнийОбъект.GetHeaderExportFields();
//	
//	Пока ВнешнийОбъект.FetchNext() > 0  Цикл
//		
//		МестныйОбъект = Документы.ОперацияБух;
//		Элемент = МестныйОбъект.СоздатьДокумент();
//        ТиповаяОперация = Справочники.ТиповыеОперации.НайтиПоНаименованию(ИмяОперации);
//		
//	
//		Элемент.ТиповаяОперация = ТиповаяОперация;
//		
//		НайтиИПрисвоитьАтрибут(Атрибуты, "Организация", Элемент);
//		НайтиИПрисвоитьАтрибут(Атрибуты, "СуммаОперации", Элемент);
//		НайтиИПрисвоитьАтрибут(Атрибуты, "Комментарий", Элемент);
//		НайтиИПрисвоитьАтрибут(Атрибуты, "Содержание", Элемент);
//		НайтиИПрисвоитьАтрибут(Атрибуты, "Ответственный", Элемент);
//		НайтиИПрисвоитьАтрибут(Атрибуты, "Дата", Элемент);
//		
//		НастройкиTP = ПолучитьНастройкиTP(Атрибуты, Элемент.Организация);

//		ПропущенныеПараметры = "";
//		Для каждого Пар Из ТиповаяОперация.Параметры Цикл
//			ОписаниеТиповПараметра = Пар.Тип.Получить();
//			СтрокаТЧ = Элемент.ЗапрашиваемыеПараметры.Добавить();
//			СтрокаТЧ.Имя           = Пар.Имя;
//			СтрокаТЧ.Представление = Пар.Представление;
//			
//			АтрибутТЧ = Атрибуты.FieldByName(Пар.Имя);
//			Если АтрибутТЧ <> NULL Тогда
//				СтрокаТЧ.Значение = ПолучитьЗначение(АтрибутТЧ, НастройкиTP);
//			Иначе
//				СтрокаТЧ.Значение = "";
//				ПропущенныеПараметры = ПропущенныеПараметры + Пар.Имя + ";";
//			КонецЕсли;
//		КонецЦикла;
//		Если ПропущенныеПараметры <> "" Тогда
//			Написать("(Для справки) Отсутствуют данные: " + ПропущенныеПараметры);
//		КонецЕсли;
//		Элемент.ЗаполнитьНаОснованииТиповойОперации(Элемент.ТиповаяОперация,  Истина);
// 		
//		УстановитьНомерДокумента(Элемент);
//	    ПередЗаписью(Элемент);
////--------------------------------------------------------------------------------
//		Элемент.Записать(РежимЗаписиДокумента.Запись,РежимПроведенияДокумента.Неоперативный);                                  
//		Попытка
//			ВнешнийОбъект.SetDocumentLink(Строка(Элемент.Ссылка.УникальныйИдентификатор()), Элемент.Дата);  
//		Исключение  
//			Элемент.Удалить();
//			ВызватьИсключение;
//		КонецПопытки;
//		
//		СледШаг();
//	КонецЦикла;	
КонецПроцедуры

Функция ЗакачатьРегистрСведений(ВнешниеОбъекты, типОбъекта)	
	рез = истина;
	Для ИИ = 0 По ВнешниеОбъекты.Count - 1  Цикл
		Элемент = РегистрыСведений[ИмяСущности(типОбъекта)].СоздатьМенеджерЗаписи();
		ВнешнийОбъект = ВнешниеОбъекты.GetObject(ИИ);
		
		Атрибуты = ВнешнийОбъект.GetHeader();
		Для К = 0 По Атрибуты.FieldCount - 1 Цикл                 
			атрибут = Атрибуты.GetField(К);
			если не ПрисвоитьАтрибут(Элемент, Атрибут, ) тогда
				рез = ложь;
			конецесли;
	  КонецЦикла; 
	  Элемент.Записать(Истина);
	  СледШаг();
	КонецЦикла;	
	возврат рез;  	
КонецФункции

Процедура ЗакачатьДанные(ВнешнийОбъект, знач типОбъекта, НачальнаяИнициализация) 

	ТипСущ = ТипСущности(типОбъекта); 
	Если ТипСущ = "ТИПОВАЯОПЕРАЦИЯ" Тогда
		ПолноеИмя = "ТиповаяОперация." + ИмяСущности(типОбъекта);
	Иначе
		ПолноеИмя = МетаДанные.НайтиПоПолномуИмени(типОбъекта).Представление();
	КонецЕсли;
	
	Если ТипСущ = "ДОКУМЕНТ" Тогда
		Написать("Закачиваем '"+ ПолноеИмя + "'", СтатусСообщения.Информация, 1);
		ЗакачатьДокумент(ВнешнийОбъект, типОбъекта);
		Написать("Закачка '" + ПолноеИмя + "' завершена", СтатусСообщения.Информация, 1);
		//-----------------------------------------		
	ИначеЕсли ТипСущ = "ТИПОВАЯОПЕРАЦИЯ" Тогда
		Написать("Закачиваем '"+ ПолноеИмя + "'", СтатусСообщения.Информация, 1);
		имя = ИмяСущности(типОбъекта);
		типОбъекта = "Документ.ОперацияБух";
		ЗакачатьОперации(ВнешнийОбъект, имя);
		Написать("Закачка '" + ПолноеИмя + "' завершена", СтатусСообщения.Информация, 1);
	//++МС 17.12.2017 Закачиваем справочники
	//ИначеЕсли ТипСущ = "СПРАВОЧНИК" Тогда
	//	ЗакачатьСправочник(ВнешнийОбъект, типОбъекта);
	//ИначеЕсли ТипСущ = "РЕГИСТРСВЕДЕНИЙ" Тогда
	//	ЗакачатьРегистрСведений(ВнешнийОбъект, типОбъекта);
	//--МС 17.12.2017 Закачиваем справочники
	КонецЕсли;
	
	
КонецПроцедуры	 

//++МС 17.12.2017 Закачиваем справочники
Процедура ЗакачатьДанные_Справочники(ВнешнийОбъект, знач типОбъекта, НачальнаяИнициализация) 

	ТипСущ = ТипСущности(типОбъекта); 
	Если ТипСущ = "ТИПОВАЯОПЕРАЦИЯ" Тогда
		ПолноеИмя = "ТиповаяОперация." + ИмяСущности(типОбъекта);
	Иначе
		ПолноеИмя = МетаДанные.НайтиПоПолномуИмени(типОбъекта).Представление();
	КонецЕсли;
	
	Если ТипСущ = "СПРАВОЧНИК" Тогда
		Написать("Закачиваем '"+ ПолноеИмя + "'", СтатусСообщения.Информация, 1);
		ЗакачатьСправочник(ВнешнийОбъект, типОбъекта);
		Написать("Закачка '" + ПолноеИмя + "' завершена", СтатусСообщения.Информация, 1);
	ИначеЕсли ТипСущ = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Написать("Закачиваем '"+ ПолноеИмя + "'", СтатусСообщения.Информация, 1);
		ЗакачатьРегистрСведений(ВнешнийОбъект, типОбъекта);
		Написать("Закачка '" + ПолноеИмя + "' завершена", СтатусСообщения.Информация, 1);
	КонецЕсли;
	
	
КонецПроцедуры	 
//-МС 17.12.2017 Закачиваем справочники

// Загрузка строк
//
Процедура ЗагрузитьСтрокиСписаний(пОбъектСписание, пИДТиллипад)
	//лСписаниеОбъект = Элемент;
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo_tp_WriteOffDocuments.wdoc_stor_ID.stor_Name КАК СкладТиллипад,
	|	dbo_tp_WriteOffDocuments.wdoc_Date КАК Дата,
	|	ВЫРАЗИТЬ(dbo_tp_WriteOffDocuments.wdoc_Name КАК СТРОКА(30)) КАК Номер,
	|	dbo_tp_WriteOffDocumentItems.wdit_pitm_ID.pitm_Name КАК ТоварТиллипад,
	|	dbo_tp_WriteOffDocumentItems.wdit_meit_ID.meit_Name КАК ЕдИзмТиллипад,
	|	ВЫРАЗИТЬ(-1 * dbo_tp_WriteOffDocumentItems.wdit_Volume КАК ЧИСЛО(15, 3)) КАК Количество,
	|	dbo_tp_ProductGroups.pgrp_Name КАК Родитель1,
	|	dbo_tp_ProductGroups.pgrp_pgrp_ID_Parent КАК ИД_Родитель2,
	|	dbo_tp_ProductGroups1.pgrp_Name КАК Родитель2,
	|	dbo_tp_ProductItems.pitm_ID КАК ИД
	|ИЗ
	|	ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_WriteOffDocuments КАК dbo_tp_WriteOffDocuments
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_WriteOffDocumentItems КАК dbo_tp_WriteOffDocumentItems
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_ProductGroups КАК dbo_tp_ProductGroups
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_ProductGroups КАК dbo_tp_ProductGroups1
	|				ПО dbo_tp_ProductGroups.pgrp_pgrp_ID_Parent = dbo_tp_ProductGroups1.Ссылка
	|			ПО dbo_tp_WriteOffDocumentItems.wdit_pitm_ID.pitm_pgrp_ID = dbo_tp_ProductGroups.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_ProductItems КАК dbo_tp_ProductItems
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_ProductTypes КАК dbo_tp_ProductTypes
	|				ПО dbo_tp_ProductItems.pitm_ptyp_ID = dbo_tp_ProductTypes.Ссылка
	|			ПО dbo_tp_WriteOffDocumentItems.wdit_pitm_ID = dbo_tp_ProductItems.Ссылка
	|		ПО dbo_tp_WriteOffDocuments.Ссылка = dbo_tp_WriteOffDocumentItems.wdit_wdoc_ID
	|ГДЕ
	|	НЕ dbo_tp_WriteOffDocumentItems.wdit_IsDeleted
	|	И dbo_tp_WriteOffDocuments.wdoc_ID = &ИД
	|УПОРЯДОЧИТЬ ПО
	|	dbo_tp_WriteOffDocumentItems.wdit_Order";
	Запрос.УстановитьПараметр("ИД",	пИДТиллипад);
	тзСтроки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого текСтр Из тзСтроки Цикл
		текСтр.СкладТиллипад = УбратьЛишниеСимволы(текСтр.СкладТиллипад);
		текСтр.ТоварТиллипад = УбратьЛишниеСимволы(текСтр.ТоварТиллипад);
		текСтр.ЕдИзмТиллипад = УбратьЛишниеСимволы(текСтр.ЕдИзмТиллипад);
		текСтр.Родитель1 = УбратьЛишниеСимволы(текСтр.Родитель1);
		текСтр.Родитель2 = УбратьЛишниеСимволы(текСтр.Родитель2);
	КонецЦикла;
	
	// Если в доке уже есть номенклатура, то распровести и очистить
	Если пОбъектСписание.Товары.Количество() > 0 Тогда
		
		Если пОбъектСписание.Проведен Тогда
			//Попытка
				пОбъектСписание.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			//Исключение
			//	Сообщить(ОписаниеОшибки()); 
			//КонецПопытки;
		КонецЕсли;
		
		пОбъектСписание.Товары.Очистить();
		
	КонецЕсли;
	
	Для Каждого текСтр Из тзСтроки Цикл
		// Отфильтруем строки с видом "Приход"
		Если текСтр.Количество < 0 Тогда Продолжить; КонецЕсли;
		
		лНоменклатура = ПолучитьНоменклатуруПоВнешнемуКодуТП(текСтр.ИД);
		Если лНоменклатура = Неопределено Тогда
			лНоменклатура = ПолучитьНоменклатуруПоНаименованию(текСтр.ТоварТиллипад);
			Если лНоменклатура = Неопределено Тогда
				ВызватьИсключение "Не найдена номенклатура """ + текСтр.ТоварТиллипад + """!";
			КонецЕсли;
		КонецЕсли;
		Если лНоменклатура.Услуга Тогда Продолжить; КонецЕсли;
		
		лЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(текСтр.ЕдИзмТиллипад, Истина,,лНоменклатура);
			Если НЕ ЗначениеЗаполнено(лЕдИзм) Тогда
				лЕдИзм = лНоменклатура.ЕдиницаХраненияОстатков;
				//ВызватьИсключение "Не найдена единица измерения """ + строка.ЕдИзмТиллипад + """ в строке: " + строка.НомерСтроки;
			КонецЕсли;
		
		нс=пОбъектСписание.Товары.Добавить();
		
		нс.Номенклатура 		= лНоменклатура;
		нс.ЕдиницаИзмерения     = лЕдИзм;
		нс.Количество           = текСтр.Количество;
		нс.Коэффициент          = лЕдИзм.Коэффициент;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСтрокиОприходований(пОбъектОприходование, пИДТиллипад)

	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo_tp_WriteOffDocuments.wdoc_stor_ID.stor_Name КАК СкладТиллипад,
	|	dbo_tp_WriteOffDocuments.wdoc_Date КАК Дата,
	|	ВЫРАЗИТЬ(dbo_tp_WriteOffDocuments.wdoc_Name КАК СТРОКА(30)) КАК Номер,
	|	dbo_tp_WriteOffDocumentItems.wdit_pitm_ID.pitm_Name КАК ТоварТиллипад,
	|	dbo_tp_WriteOffDocumentItems.wdit_meit_ID.meit_Name КАК ЕдИзмТиллипад,
	|	ВЫРАЗИТЬ(dbo_tp_WriteOffDocumentItems.wdit_Volume КАК ЧИСЛО(15, 3)) КАК Количество,
	|	dbo_tp_ProductGroups.pgrp_Name КАК Родитель1,
	|	dbo_tp_ProductGroups.pgrp_pgrp_ID_Parent КАК ИД_Родитель2,
	|	dbo_tp_ProductGroups1.pgrp_Name КАК Родитель2,
	|	dbo_tp_ProductItems.pitm_ID КАК ИД,
	|	dbo_tp_WriteOffDocumentItems.wdit_Price КАК Цена,
	|	dbo_tp_WriteOffDocumentItems.wdit_Sum КАК Сумма
	|ИЗ
	|	ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_WriteOffDocuments КАК dbo_tp_WriteOffDocuments
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_WriteOffDocumentItems КАК dbo_tp_WriteOffDocumentItems
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_ProductGroups КАК dbo_tp_ProductGroups
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_ProductGroups КАК dbo_tp_ProductGroups1
	|				ПО dbo_tp_ProductGroups.pgrp_pgrp_ID_Parent = dbo_tp_ProductGroups1.Ссылка
	|			ПО dbo_tp_WriteOffDocumentItems.wdit_pitm_ID.pitm_pgrp_ID = dbo_tp_ProductGroups.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_ProductItems КАК dbo_tp_ProductItems
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_ProductTypes КАК dbo_tp_ProductTypes
	|				ПО dbo_tp_ProductItems.pitm_ptyp_ID = dbo_tp_ProductTypes.Ссылка
	|			ПО dbo_tp_WriteOffDocumentItems.wdit_pitm_ID = dbo_tp_ProductItems.Ссылка
	|		ПО dbo_tp_WriteOffDocuments.Ссылка = dbo_tp_WriteOffDocumentItems.wdit_wdoc_ID
	|ГДЕ
	|	НЕ dbo_tp_WriteOffDocumentItems.wdit_IsDeleted
	|	И dbo_tp_WriteOffDocuments.wdoc_ID = &ИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	dbo_tp_WriteOffDocumentItems.wdit_Order";
	Запрос.УстановитьПараметр("ИД",	пИДТиллипад);
	тзСтроки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого текСтр Из тзСтроки Цикл
		текСтр.СкладТиллипад = УбратьЛишниеСимволы(текСтр.СкладТиллипад);
		текСтр.ТоварТиллипад = УбратьЛишниеСимволы(текСтр.ТоварТиллипад);
		текСтр.ЕдИзмТиллипад = УбратьЛишниеСимволы(текСтр.ЕдИзмТиллипад);
		текСтр.Родитель1 = УбратьЛишниеСимволы(текСтр.Родитель1);
		текСтр.Родитель2 = УбратьЛишниеСимволы(текСтр.Родитель2);
	КонецЦикла;
	
	// Если в доке уже есть номенклатура, то распровести и очистить
	Если пОбъектОприходование.Товары.Количество() > 0 Тогда
		
		Если пОбъектОприходование.Проведен Тогда
			//Попытка
				пОбъектОприходование.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			//Исключение
			//	Сообщить(ОписаниеОшибки()); 
			//КонецПопытки;
		КонецЕсли;
		
		пОбъектОприходование.Товары.Очистить();
		
	КонецЕсли;
	
	Для Каждого текСтр Из тзСтроки Цикл
		// Отфильтруем строки с видом "Расход"
		Если текСтр.Количество < 0 Тогда Продолжить; КонецЕсли;
			
		лНоменклатура = ПолучитьНоменклатуруПоВнешнемуКодуТП(текСтр.ИД);
		Если лНоменклатура = Неопределено Тогда
			лНоменклатура = ПолучитьНоменклатуруПоНаименованию(текСтр.ТоварТиллипад);
			Если лНоменклатура = Неопределено Тогда
				ВызватьИсключение "Не найдена номенклатура """ + текСтр.ТоварТиллипад + """!";
			КонецЕсли;
		КонецЕсли;
		Если лНоменклатура.Услуга Тогда Продолжить; КонецЕсли;
		лЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(текСтр.ЕдИзмТиллипад, Истина,,лНоменклатура);
			Если НЕ ЗначениеЗаполнено(лЕдИзм) Тогда
				лЕдИзм = лНоменклатура.ЕдиницаХраненияОстатков;
				//ВызватьИсключение "Не найдена единица измерения """ + строка.ЕдИзмТиллипад + """ в строке: " + строка.НомерСтроки;
			КонецЕсли;
		
		нс=пОбъектОприходование.Товары.Добавить();
		
		нс.Номенклатура 		= лНоменклатура;
		нс.ЕдиницаИзмерения     = лЕдИзм;
		нс.Количество           = текСтр.Количество;
		нс.Коэффициент          = лЕдИзм.Коэффициент;
		нс.Цена					= текСтр.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(
			нс, пОбъектОприходование);
		нс.СуммаРегл = нс.Сумма;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьСтрокиРеализаций(пОбъектРеализация, пИДТиллипад)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	dbo_tp_SaleDocuments.sdoc_Name КАК Номер,
	|	dbo_tp_SaleDocuments.sdoc_Date КАК Дата,
	|	dbo_tp_SaleDocuments.sdoc_Name КАК Комментарий,
	|	0 КАК СуммаДокумента,
	|	dbo_tp_Stores.stor_Name КАК СкладТиллипад,
	|	dbo_tp_SaleDocumentStates.sdst_Name КАК Статус,
	|	dbo_tp_SaleDocumentItems.sdit_pitm_ID.pitm_Name КАК ТоварТиллипад,
	|	dbo_tp_SaleDocumentItems.sdit_meit_ID.meit_Name КАК ЕдИзмТиллипад,
	|	dbo_tp_SaleDocumentItems.sdit_Volume КАК КолВо,
	|	dbo_tp_SaleDocumentItems.sdit_ID КАК ИД,
	|	вт_Цены.Цена
	|ИЗ
	|	ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_SaleDocuments КАК dbo_tp_SaleDocuments
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_Stores КАК dbo_tp_Stores
	|		ПО dbo_tp_SaleDocuments.sdoc_stor_ID = dbo_tp_Stores.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_SaleDocumentStates КАК dbo_tp_SaleDocumentStates
	|		ПО dbo_tp_SaleDocuments.sdoc_sdst_ID = dbo_tp_SaleDocumentStates.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_SaleDocumentItems КАК dbo_tp_SaleDocumentItems
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				dbo_tp_SaleDocumentOrderItems.sdoi_sdit_ID КАК СтрокаРеализации,
	|				dbo_tp_OrderItems.orit_Price КАК Цена
	|			ИЗ
	|				ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_SaleDocumentOrderItems КАК dbo_tp_SaleDocumentOrderItems
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_OrderItems КАК dbo_tp_OrderItems
	|					ПО dbo_tp_SaleDocumentOrderItems.sdoi_orit_ID = dbo_tp_OrderItems.Ссылка) КАК вт_Цены
	|			ПО dbo_tp_SaleDocumentItems.Ссылка = вт_Цены.СтрокаРеализации
	|		ПО dbo_tp_SaleDocuments.Ссылка = dbo_tp_SaleDocumentItems.sdit_sdoc_ID
	|			И (НЕ dbo_tp_SaleDocumentItems.sdit_IsDeleted)
	|ГДЕ
	|	НЕ dbo_tp_SaleDocumentItems.sdit_IsDeleted
	|	И dbo_tp_SaleDocuments.sdoc_ID = &ИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	dbo_tp_SaleDocumentItems.sdit_Order";
	
	Запрос.УстановитьПараметр("ИД",	пИДТиллипад);
	тзСтроки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого текСтр Из тзСтроки Цикл
		текСтр.СкладТиллипад 	= УбратьЛишниеСимволы(текСтр.СкладТиллипад);
		текСтр.ТоварТиллипад 	= УбратьЛишниеСимволы(текСтр.ТоварТиллипад);
		текСтр.ЕдИзмТиллипад 	= УбратьЛишниеСимволы(текСтр.ЕдИзмТиллипад);
		текСтр.Статус 			= УбратьЛишниеСимволы(текСтр.Статус);
	КонецЦикла;
	
	// Если в доке уже есть номенклатура, то распровести и очистить
	Если пОбъектРеализация.Товары.Количество() > 0 Тогда
		
		Если пОбъектРеализация.Проведен Тогда
			//Попытка
				пОбъектРеализация.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			//Исключение
			//	Сообщить(ОписаниеОшибки()); 
			//КонецПопытки;
		КонецЕсли;
		
		пОбъектРеализация.Товары.Очистить();
		
	КонецЕсли;
	
	Для Каждого текСтр Из тзСтроки Цикл
			
		лНоменклатура = ПолучитьНоменклатуруПоВнешнемуКодуТП(текСтр.ИД);
		Если лНоменклатура = Неопределено Тогда
			лНоменклатура = ПолучитьНоменклатуруПоНаименованию(текСтр.ТоварТиллипад);
			Если лНоменклатура = Неопределено Тогда
				ВызватьИсключение "Не найдена номенклатура """ + текСтр.ТоварТиллипад + """!";
			КонецЕсли;
		КонецЕсли;
		Если лНоменклатура.Услуга Тогда Продолжить; КонецЕсли;
		лЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(текСтр.ЕдИзмТиллипад, Истина,,лНоменклатура);
			Если НЕ ЗначениеЗаполнено(лЕдИзм) Тогда
				лЕдИзм = лНоменклатура.ЕдиницаХраненияОстатков;
				//ВызватьИсключение "Не найдена единица измерения """ + строка.ЕдИзмТиллипад + """ в строке: " + строка.НомерСтроки;
			КонецЕсли;
		
		нс=пОбъектРеализация.Товары.Добавить();
		нс.Номенклатура 		= лНоменклатура;
		нс.ЕдиницаИзмерения     = лЕдИзм;
		нс.Количество           = текСтр.КолВо;
		нс.Коэффициент          = лЕдИзм.Коэффициент;
		нс.Цена					= текСтр.Цена;
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(нс, пОбъектРеализация);
		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(нс, пОбъектРеализация, "Реализация");
		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(нс, пОбъектРеализация);
		// Заполнение цены зависит от розничности операции.
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(нс, пОбъектРеализация, глЗначениеПеременной("ВалютаРегламентированногоУчета")); 
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(нс, пОбъектРеализация);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(нс, пОбъектРеализация);	

	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура ЗагрузитьСтрокиПеремещений(пОбъектПеремещение, пИДТиллипад)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	dbo_tp_MoveDocumentItems.mdit_pitm_ID.pitm_Name КАК ТоварТиллипад,
	|	dbo_tp_MoveDocumentItems.mdit_meit_ID.meit_Name КАК ЕдИзмТиллипад,
	|	dbo_tp_MoveDocumentItems.mdit_Volume КАК КолВо,
	|	dbo_tp_MoveDocumentItems.mdit_ID КАК ИД
	|ИЗ
	|	ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_MoveDocuments КАК dbo_tp_MoveDocuments
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Тиллипад.Таблица.dbo_tp_MoveDocumentItems КАК dbo_tp_MoveDocumentItems
	|		ПО dbo_tp_MoveDocuments.Ссылка = dbo_tp_MoveDocumentItems.mdit_mdoc_ID
	|			И (НЕ dbo_tp_MoveDocumentItems.mdit_IsDeleted)
	|ГДЕ
	|	НЕ dbo_tp_MoveDocumentItems.mdit_IsDeleted
	|	И dbo_tp_MoveDocuments.mdoc_ID = &ИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	dbo_tp_MoveDocumentItems.mdit_Order";
	
	Запрос.УстановитьПараметр("ИД",	пИДТиллипад);
	тзСтроки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого текСтр Из тзСтроки Цикл
		текСтр.ТоварТиллипад 	= УбратьЛишниеСимволы(текСтр.ТоварТиллипад);
		текСтр.ЕдИзмТиллипад 	= УбратьЛишниеСимволы(текСтр.ЕдИзмТиллипад);
	КонецЦикла;
	
	// Если в доке уже есть номенклатура, то распровести и очистить
	Если пОбъектПеремещение.Товары.Количество() > 0 Тогда
		
		Если пОбъектПеремещение.Проведен Тогда
			//Попытка
				пОбъектПеремещение.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			//Исключение
			//	Сообщить(ОписаниеОшибки()); 
			//КонецПопытки;
		КонецЕсли;
		
		пОбъектПеремещение.Товары.Очистить();
		
	КонецЕсли;
	
	Для Каждого текСтр Из тзСтроки Цикл
			
		лНоменклатура = ПолучитьНоменклатуруПоВнешнемуКодуТП(текСтр.ИД);
		Если лНоменклатура = Неопределено Тогда
			лНоменклатура = ПолучитьНоменклатуруПоНаименованию(текСтр.ТоварТиллипад);
			Если лНоменклатура = Неопределено Тогда
				ВызватьИсключение "Не найдена номенклатура """ + текСтр.ТоварТиллипад + """!";
			КонецЕсли;
		КонецЕсли;
		Если лНоменклатура.Услуга Тогда Продолжить; КонецЕсли;
		лЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(текСтр.ЕдИзмТиллипад, Истина,,лНоменклатура);
			Если НЕ ЗначениеЗаполнено(лЕдИзм) Тогда
				лЕдИзм = лНоменклатура.ЕдиницаХраненияОстатков;
				//ВызватьИсключение "Не найдена единица измерения """ + строка.ЕдИзмТиллипад + """ в строке: " + строка.НомерСтроки;
			КонецЕсли;
		
		нс=пОбъектПеремещение.Товары.Добавить();
		нс.Номенклатура 		= лНоменклатура;
		нс.ЕдиницаИзмерения     = лЕдИзм;
		нс.Количество           = текСтр.КолВо;
		нс.Коэффициент          = лЕдИзм.Коэффициент;
		//нс.Цена					= текСтр.Цена;
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(нс, пОбъектПеремещение);
		// Заполняем реквизиты табличной части.
		//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(нс, пОбъектРеализация, "Реализация");
		//ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(нс, пОбъектПеремещение);
		// Заполнение цены зависит от розничности операции.
		//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(нс, пОбъектРеализация, глЗначениеПеременной("ВалютаРегламентированногоУчета")); 
		//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(нс, пОбъектПеремещение);
		//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(нс, пОбъектПеремещение);	

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(нс, пОбъектПеремещение);
		//УстановитьЦенуНоменклатуры(нс);
		нс.Качество = Справочники.Качество.Новый;

	КонецЦикла;
КонецПроцедуры

Процедура УдалитьДокументы(Список) Экспорт;
	фмУдалениеДокументов = ПолучитьФорму("фмУдалениеДокументов");
	фмУдалениеДокументов.УдалитьСписокДокументов(Список); 
	Если не фмУдалениеДокументов.МожноПродолжитьСинхронизацию Тогда
		ВызватьИсключение "Закачка данных прервана"
	КонецЕсли;
	
КонецПроцедуры

Функция Гуид2ИмяКнопки(знач ГУИД) Экспорт
	Возврат("Гуид" + СтрЗаменить(ГУИД, "-", "_"));
КонецФункции

Функция ИмяКнопки2Гуид(знач ИмяКнопки) Экспорт
	ИмяКнопки = Прав(ИмяКнопки, СтрДлина(ИмяКнопки)-4);
	Возврат(СтрЗаменить(ИмяКнопки, "_", "-"));
КонецФункции

//////////// Специфичные для конфигураций и их версий -->
Процедура ЗаписьТиповыхОпераций() Экспорт;
//	Если Не ПустоеЗначениеTP(ПолучитьТиповуюОперацию("Себестоимость продаж ТР").Ссылка) 
//			или Не ПустоеЗначениеTP(ПолучитьТиповуюОперацию("Безналичная выручка ТР").Ссылка)  Тогда
//		Если Вопрос("Типовые операции (Себестоимость продаж ТР, Безналичная выручка ТР) будут заменены
//				| на стандартные. Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет,
//				"Запись стандартных типовых операций") = КодВозвратаДиалога.Нет Тогда
//			Возврат;
//		КонецЕсли
//	КонецЕсли;
//	
//	////////Себестоимость продаж ТР 
//	фСчетУчета = "БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, ПродуктTP, Склад)[""СчетУчета""]";
//	то = ПолучитьТиповуюОперацию("Себестоимость продаж ТР");
//	
//	
//	ДобавитьПараметр(то, "Сумма", "Сумма", "Число", Истина, ложь);
//	ДобавитьПараметр(то, "ОтражатьВНалоговомУчете", "Отражать в налоговом учете", "Булево", Ложь, ложь, ложь);
//	ДобавитьПараметр(то, "Склад", "Склад", "СправочникСсылка.Склады", Истина, ложь);
//	ДобавитьПараметр(то, "ПродуктTP", "ПродуктTP", "СправочникСсылка.Номенклатура", Истина, ложь);
//	ДобавитьПараметр(то, "Организация", "Организация", "СправочникСсылка.Организации", Истина, ложь);
//	ДобавитьПараметр(то, "ЧерезПроизводство", "Через производство", "Булево", Ложь, ложь, ложь);
//	
//	
//	//БУ
//	
//	Формулы = Новый Соответствие();
//	ДобавитьФормулу("СчетКт", фСчетУчета, формулы);
//	ДобавитьФормулу("Сумма", "Сумма", формулы);
//	ДобавитьФормулу("СубконтоКт1", "ПродуктTP", формулы);
//	
//	
//	стр = ДобавитьПроводкуБУ(то, "ОсновноеПроизводство", , "Списаны ТМЦ", "ЧерезПроизводство", Формулы);
//	Стр.КоличествоКт = 1;
//	
//	
//	Формулы1 = Новый Соответствие();
//	ДобавитьФормулу("Сумма", "Сумма", формулы1);
//	стр = ДобавитьПроводкуБУ(то, "СебестоимостьПродажНеЕНВД", "ОсновноеПроизводство", "Списаны ТМЦ", "ЧерезПроизводство", Формулы1);

//	
//	стр = ДобавитьПроводкуБУ(то, "СебестоимостьПродажНеЕНВД", , "Списаны ТМЦ", "Не ЧерезПроизводство", Формулы);
//	стр.КоличествоКт = 1;
//	
//	то.Записать();
//	
//	
//	////////Безналичная выручка (Банковские карты)
//	//БУ
//	то = ПолучитьТиповуюОперацию("Безналичная выручка (Банковские карты)");
//	
//	
//	ДобавитьПараметр(то, "Сумма", "Сумма", "Число", Истина, ложь);
//	ДобавитьПараметр(то, "Комментарий", "Комментарий", "Строка", ложь, ложь);
//	ДобавитьПараметр(то, "СтавкаНДС", "Ставка НДС", "ПеречислениеСсылка.СтавкиНДС", Истина, ложь);
//	ДобавитьПараметр(то, "СуммаНДС", "Сумма НДС", "Число", Истина, ложь);
//	ДобавитьПараметр(то, "ОтражатьВНалоговомУчете", "Отражать в налоговом учете", "Булево", Ложь, ложь, ложь);
//	

//	Формулы = Новый Соответствие();
//	ДобавитьФормулу("СубконтоКт2", "СтавкаНДС", формулы);
//	ДобавитьФормулу("Сумма", "Сумма", формулы);
//	ДобавитьФормулу("Содержание", "Комментарий", формулы);


//	стр = ДобавитьПроводкуБУ(то, "ПереводыВПути", "ВыручкаНеЕНВД", , , Формулы);
//	
//	Формулы = Новый Соответствие();
//	ДобавитьФормулу("СубконтоДт2", "СтавкаНДС", формулы);
//	ДобавитьФормулу("Сумма", "СуммаНДС", формулы);
//	ДобавитьФормулу("Содержание", "Комментарий", формулы);


//	стр = ДобавитьПроводкуБУ(то, "Продажи_НДС", "НДС", , "Число(СуммаНДС) > 0", Формулы);
//	
//	то.Записать();
//	
//	///////Безналичная выручка (Расчеты с покупателями)
//	//БУ
//	то = ПолучитьТиповуюОперацию("Безналичная выручка (Расчеты с покупателями)");
//	
//	
//	ДобавитьПараметр(то, "Сумма", "Сумма", "Число", Истина, ложь);
//	ДобавитьПараметр(то, "Комментарий", "Комментарий", "Строка", ложь, ложь);
//	ДобавитьПараметр(то, "СтавкаНДС", "Ставка НДС", "ПеречислениеСсылка.СтавкиНДС", Истина, ложь);
//	ДобавитьПараметр(то, "СуммаНДС", "Сумма НДС", "Число", Истина, ложь);
//	ДобавитьПараметр(то, "ОтражатьВНалоговомУчете", "Отражать в налоговом учете", "Булево", Ложь, ложь, ложь);
//	ДобавитьПараметр(то, "ТипОплаты", "Тип Оплаты", "Строка", Истина, ложь, ложь);
//	

//	Формулы = Новый Соответствие();
//	ДобавитьФормулу("СубконтоКт2", "СтавкаНДС", формулы);
//	ДобавитьФормулу("Сумма", "Сумма", формулы);
//	ДобавитьФормулу("Содержание", "Комментарий", формулы);


//	стр = ДобавитьПроводкуБУ(то, "РасчетыСПокупателями", "ВыручкаНеЕНВД", , "ТипОплаты = ""ТипОплаты""", Формулы);
//	
//	
//	Формулы = Новый Соответствие();
//	ДобавитьФормулу("СубконтоДт2", "СтавкаНДС", формулы);
//	ДобавитьФормулу("Сумма", "СуммаНДС", формулы);
//	ДобавитьФормулу("Содержание", "Комментарий", формулы);


//	стр = ДобавитьПроводкуБУ(то, "Продажи_НДС", "НДС", , "Число(СуммаНДС) > 0", Формулы);
//	
//	то.Записать();
//	
//	//////Акты списания
//	//БУ
//	то = ПолучитьТиповуюОперацию("Акты списания");
//	
//	
//	ДобавитьПараметр(то, "Сумма", "Сумма", "Число", Истина, ложь);
//	ДобавитьПараметр(то, "ОтражатьВНалоговомУчете", "Отражать в налоговом учете", "Булево", Ложь, ложь, ложь);
//	ДобавитьПараметр(то, "Склад", "Склад", "СправочникСсылка.Склады", Истина, ложь);
//	ДобавитьПараметр(то, "ПродуктTP", "ПродуктTP", "СправочникСсылка.Номенклатура", Истина, ложь);
//	ДобавитьПараметр(то, "Организация", "Организация", "СправочникСсылка.Организации", Истина, ложь);
//	ДобавитьПараметр(то, "ТипАкта", "Тип Акта", "Строка", Истина, ложь, ложь);
//	
//	фСчетУчета = "БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, ПродуктTP, Склад)[""СчетУчета""]";
//	
//	Формулы = Новый Соответствие();
//	ДобавитьФормулу("Сумма", "Сумма", формулы);
//	ДобавитьФормулу("СчетКт", фСчетУчета, формулы);
//	ДобавитьФормулу("СубконтоКт1", "ПродуктTP", формулы);
//	

//	стр = ДобавитьПроводкуБУ(то, "НедостачиИПотериОтПорчиЦенностей", , "Списаны ТМЦ", "ТипАкта = ""ТипАкта""", Формулы);
//	Стр.КоличествоКт = 1;
//	
//	то.Записать();
//	
КонецПроцедуры

Процедура ПередЗаписью(Элемент)
	//Взято из формы документа
	Для Каждого Проводка Из Элемент.Движения.Хозрасчетный Цикл

		Проводка.Период      = Элемент.Дата;
		Проводка.Организация = Элемент.Организация;

	КонецЦикла;

	Для Каждого Запись Из Элемент.Движения.КнигаУчетаДоходовИРасходов Цикл

		Запись.Период      = Элемент.Дата;
		Запись.Организация = Элемент.Организация;
		Запись.Активность  = Истина;
		
	КонецЦикла;

КонецПроцедуры

Функция НайтиДоговор(Контрагент, ВидДоговора, КомментарийСодержит, Организация)
	Договора = Новый Массив;
	Выборка = Справочники.ДоговорыКонтрагентов.Выбрать(, Контрагент, );  //, Отбор);
	Договор = неопределено;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидДоговора = ВидДоговора И Организация = Выборка.Организация Тогда
			Договор = Выборка.Ссылка;
			Договора.Добавить(Договор);
		КонецЕсли;
	КонецЦикла;
	Если Договора.Количество() > 1 тогда
		Для каждого Д из Договора цикл
			Если Найти(Д.Комментарий, КомментарийСодержит) > 0 Тогда
				Договор = Д;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	

	Возврат Договор;
КонецФункции

Функция СоздатьДоговор(Контрагент, ВидДоговора, КомментарийСодержит, НазваниеДоговора, Валюта, Организация)
	// создавать договор только по флажку
	Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	Договор.Наименование = НазваниеДоговора;
	Договор.Владелец = Контрагент;
	Договор.Организация = Организация;
	Договор.ВалютаВзаиморасчетов = Валюта;
	Договор.ВидДоговора = ВидДоговора;
	Договор.Записать();
	Договор = Договор.Ссылка;
	Возврат Договор;
КонецФункции

Функция ПолучитьДоговор1(Контрагент, ВидДоговора, НазваниеДоговора, НазваниеДоговора_ПоУмолчанию, Валюта, Организация)
	Если НазваниеДоговора = "" Тогда
		 НазваниеДоговора = НазваниеДоговора_ПоУмолчанию;
	КонецЕсли;	

	//Отбор = Новый Структура("Наименование");
	//Отбор.Наименование = НазваниеДоговора;
	
	Выборка = Справочники.ДоговорыКонтрагентов.Выбрать(, Контрагент, );  //, Отбор);
	Договор = неопределено;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидДоговора = ВидДоговора
				И Организация = Выборка.Организация Тогда
			Договор = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Договор = неопределено Тогда
		Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Договор.Наименование = НазваниеДоговора;
		Договор.Владелец = Контрагент;
		Договор.Организация = Организация;
		Договор.ВалютаВзаиморасчетов = Валюта;
		Договор.ВидДоговора = ВидДоговора;
		Договор.Записать();
		Договор = Договор.Ссылка;
	КонецЕсли;
	Возврат Договор;
КонецФункции

Функция ПолучитьСкриптФормированияТабличнойЧасти(ТипДокумента);
	результат = ТабЧастьПроцЛист[ТипДокумента];
	если ПустаяСтрока(результат) тогда
		если Обработки.ИмпортTP.ПроверитьВерсию(Перечисления.ВерсииКонфигаTP.Версия20) тогда
//			результат =  "Объект.ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабличнойЧасти, ЗаполнятьБУ, ЗаполнятьНУ)";		
		иначеесли Обработки.ИмпортTP.ПроверитьВерсию(Перечисления.ВерсииКонфигаTP.Версия30_27_9) или Обработки.ИмпортTP.ПроверитьВерсию(Перечисления.ВерсииКонфигаTP.Версия30_28) тогда
			//++МС 30.10.2017
			//результат = "Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти)";
			//--МС 30.10.2017
		конецесли;
	конецесли;
	возврат результат;
конецфункции

Процедура СформироватьТабЧастьПроцЛист() Экспорт;
	
	ТабЧастьПроцЛист = Новый Соответствие;
	Если Обработки.ИмпортTP.ПроверитьВерсию(Перечисления.ВерсииКонфигаTP.Версия20)  тогда		
		;
		////++МС
		////;
		//ТабЧастьПроцЛист.Вставить("ПоступлениеТоваровУслуг",
		//		"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
		//		|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабЧасти, ИмяТабличнойЧасти);
		//		|КонецЦикла;");
		////--МС
	иначеесли Обработки.ИмпортTP.ПроверитьВерсию(Перечисления.ВерсииКонфигаTP.Версия30) тогда
		ТабЧастьПроцЛист.Вставить("АвансовыйОтчет", "Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВТабличнойЧасти()");
		ТабЧастьПроцЛист.Вставить("ВозвратТоваровОтПокупателя", "Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВТабЧасти(Объект, ТабличнаяЧасть, ИмяТабличнойЧасти)");
		ТабЧастьПроцЛист.Вставить("ВозвратТоваровПоставщику", 
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект, СтрокаТабЧасти, ИмяТабличнойЧасти);
		    	|КонецЦикла;");
		ТабЧастьПроцЛист.Вставить("ГТДИмпорт", 
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабЧасти);
		    	|КонецЦикла;");
				
		ТабЧастьПроцЛист.Вставить("КорректировкаДолга", 
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти);
		    	|КонецЦикла;");
		ТабЧастьПроцЛист.Вставить("КорректировкаПоступления", 
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(Объект, СтрокаТабЧасти, ИмяТабличнойЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
		    	|КонецЦикла;");
		ТабЧастьПроцЛист.Вставить("КорректировкаРеализации", 
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект, СтрокаТабЧасти, ИмяТабличнойЧасти);
		    	|КонецЦикла;");
		
		ТабЧастьПроцЛист.Вставить("ОказаниеУслуг", "Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВТабЧасти(Объект, ТабличнаяЧасть, ИмяТабличнойЧасти)");
		ТабЧастьПроцЛист.Вставить("ОприходованиеТоваров", "Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект)");
		ТабЧастьПроцЛист.Вставить("ОтчетКомиссионераОПродажах", 
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабличнойЧасти, ЗаполнятьБУ, ложь, Объект);
		    	|КонецЦикла;");
		ТабЧастьПроцЛист.Вставить("ОтчетОРозничныхПродажах", 
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект, СтрокаТабЧасти, Истина);
		    	|КонецЦикла;");
		ТабЧастьПроцЛист.Вставить("ОтчетПроизводстваЗаСмену", 
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, Объект.Склад, СтрокаТабЧасти, ИмяТабличнойЧасти, Истина);
		    	|КонецЦикла;");
		ТабЧастьПроцЛист.Вставить("ПередачаМатериаловВЭксплуатацию",
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабличнойЧасти, Объект.Организация, истина);
		    	|КонецЦикла;");
				
		ТабЧастьПроцЛист.Вставить("ПередачаТоваров", "Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВТабЧасти(ИмяТабличнойЧасти, истина)");
		ТабЧастьПроцЛист.Вставить("ПеремещениеТоваров", "Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабличнойЧасти, ЗаполнятьБУ, Объект)");
		
		ТабЧастьПроцЛист.Вставить("ПоступлениеДопРасходов",
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(СтрокаТабЧасти, Объект);
		    	|КонецЦикла;");
		ТабЧастьПроцЛист.Вставить("ПоступлениеТоваровУслуг",
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабЧасти, ИмяТабличнойЧасти);
		    	|КонецЦикла;");
				
		ТабЧастьПроцЛист.Вставить("РеализацияТоваровУслуг",
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект, СтрокаТабЧасти, ИмяТабличнойЧасти);
		    	|КонецЦикла;");
		ТабЧастьПроцЛист.Вставить("СписаниеТоваров", "Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабличнойЧасти, ЗаполнятьБУ, Объект)");
		
		ТабЧастьПроцЛист.Вставить("ТребованиеНакладная",
				"Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
				|	Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабличнойЧасти, ЗаполнятьБУ);
		    	|КонецЦикла;");
	иначеесли Обработки.ИмпортTP.ПроверитьВерсию(Перечисления.ВерсииКонфигаTP.Версия30_27_9) или Обработки.ИмпортTP.ПроверитьВерсию(Перечисления.ВерсииКонфигаTP.Версия30_28) тогда
		;		
		//ТабЧастьПроцЛист.Вставить("ОприходованиеТоваров", "Документы[Объект.Метаданные().Имя].ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти)");
	конецесли;
КонецПроцедуры

Процедура УстановитьНомерДокумента(ДокументОбъект) Экспорт;
	ДокументОбъект.УстановитьНовыйНомер();
	//Попытка
	//	Выполнить("ОбщегоНазначенияЗК.УстановитьНомерДокумента(ДокументОбъект)");
	//Исключение
	//	Выполнить("ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект)");
	//КонецПопытки;
КонецПроцедуры

#region МС_Дополнительно

Функция УбратьЛишниеСимволы(Строка1) Экспорт
	НовСтрока = "";
	Для Сч = 1 по СтрДлина(Строка1) Цикл
		ТекСимв = Сред(Строка1, Сч, 1);
		Если КодСимвола(ТекСимв) > 0 Тогда
			НовСтрока = НовСтрока + ТекСимв;
		Иначе
			НовСтрока = ""; // Начать с начала
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовСтрока;
	
КонецФункции

// пИД - Внешний код номенклатуры Тиллипада
Функция ПолучитьНоменклатуруПоВнешнемуКодуТП(пВнешнийКод)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МС_НоменклатураТиллипад.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.МС_НоменклатураТиллипад КАК МС_НоменклатураТиллипад
	|ГДЕ
	|	МС_НоменклатураТиллипад.ИД = &ИД";
	Запрос.УстановитьПараметр("ИД", пВнешнийКод);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 1 Тогда
		Возврат Рез[0].Номенклатура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьНоменклатуруПоНаименованию(пНаименование)
	Запрос=Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	спрНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК спрНоменклатура
	|ГДЕ
	|	НЕ спрНоменклатура.ЭтоГруппа
	|	И НЕ спрНоменклатура.ПометкаУдаления
	|	И спрНоменклатура.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", пНаименование);
	Рез = Запрос.Выполнить().Выгрузить();
	//Если Рез.Количество() = 1 Тогда
	//	Возврат Рез[0].Номенклатура;
	Если Рез.Количество() > 0 Тогда
		Возврат Рез[0].Номенклатура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#endregion

//////////// Специфичные для конфигураций и их версий !!!


//ВерсияОбработкиЭкспортТП = "1.1.0.80 (21.03.2014)";
//ВерсияКонфигурации = Лев(Метаданные.Версия,Найти(Метаданные.Версия,".")-1);
СформироватьТабЧастьПроцЛист();

Массив = Новый Массив;

Массив.Добавить(Тип("Строка"));
Массив.Добавить(Тип("Число"));
Массив.Добавить(Тип("Дата"));
Массив.Добавить(Тип("Булево"));
ПростыеТипы = Новый ОписаниеТипов(Массив, , );

ТипСправочники = Справочники.ТипВсеСсылки();
ТипДокументы = Документы.ТипВсеСсылки();
ТипПеречисления = Перечисления.ТипВсеСсылки();
АвтоСинхронизация = Ложь;
МодульФункций = обработки.ИмпортTP;

//++МС 31.10.2017
мТекЕдИзм = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
//--МС 31.10.2017

//++МС 17.12.2017
мСписанияТоваров = Новый Массив;
//--МС 17.12.2017
